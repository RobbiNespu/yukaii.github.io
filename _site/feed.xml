<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daily Oops!</title>
    <description>Yukai's blog. Web tech, apps, photos, and notes.
</description>
    <link>http://yukaii.tw/</link>
    <atom:link href="http://yukaii.tw/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 11 Feb 2017 22:50:15 +0800</pubDate>
    <lastBuildDate>Sat, 11 Feb 2017 22:50:15 +0800</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>總結一下我身為開發者的 2016</title>
        <description>&lt;h2&gt;新年快樂&lt;/h2&gt;

&lt;p&gt;你說一月一號放假要幹嘛？除了出門曬曬太陽走走之外（天氣有夠好！），當然按照慣例的要來發一篇「新年新希望新目標」、「過往一年的總結」。不過常常年底到了，卻悔恨今年又一堆目標沒有達成。為了防止這種狀況發生，我們就別寫展望了，直接來寫回顧就好啦 XD！未來總是充滿變數而不可預知，總結過往一年的種種，應該能帶來一些前進的動力吧。&lt;/p&gt;

&lt;p&gt;作為一個&lt;strong&gt;混亂邪惡&lt;/strong&gt;的學生開發者，學生當然只是個好用的擋箭牌身份，其實我的真實身份是...&lt;del&gt;昆庫星團第十五號小行星的混血王子&lt;/del&gt;（太二了這個）。2016 是我個人專案多產的一年，雖然沒有到一個月一個作品，不過上的了檯面的倒是不少。「上的了檯面」當然是以目前自己的標準來看，再過不久可能就通通打入垃圾玩具的等級了哈哈！QAQ&lt;/p&gt;

&lt;h2&gt;前端大平台&lt;/h2&gt;

&lt;p&gt;從整整一年前的 &lt;a href=&quot;https://github.com/Yukaii/ImgurDownloader&quot;&gt;Imgur 相簿下載器&lt;/a&gt; 開始，踏入了 React/Redux 的大坑，再於過年期間開發了 &lt;a href=&quot;https://github.com/Yukaii/kaif-ios&quot;&gt;Kaif.io 論壇 iOS App&lt;/a&gt;，對 React/Redux 更進一步熟悉；五月左右，承先啟後的再度使用 React/Redux 加上 Electron 開發了 &lt;a href=&quot;https://github.com/ComicsReader/app&quot;&gt;Comics Reader 漫畫閱讀器&lt;/a&gt; ，然後到最近兩週的 &lt;a href=&quot;https://github.com/Yukaii/cafenomad-app/&quot;&gt;cafenomad 臺灣工作咖啡廳&lt;/a&gt; 專案。&lt;/p&gt;

&lt;p&gt;四月多時，把原本在 &lt;a href=&quot;http://yukaihuang93.logdown.com&quot;&gt;Logdown&lt;/a&gt; 的部落格搬到 &lt;a href=&quot;https://github.com/Yukaii/yukaii.github.io&quot;&gt;GitHub Pages&lt;/a&gt; 上，用 &lt;a href=&quot;https://github.com/Yukaii/Blog&quot;&gt;Jekyll 建置&lt;/a&gt;。承襲「用力操壞 GitHub Pages」的中心思想，在九月底做了致敬好碰友 Neson 前作的&lt;a href=&quot;https://github.com/Yukaii/ics-scheduler&quot;&gt;行事曆課表產生器&lt;/a&gt;，又在十月底開始了&lt;a href=&quot;https://github.com/puraku/app&quot;&gt;桌面版噗浪 App 計劃 - Puraku&lt;/a&gt;，首次嘗試 Vue.js 並結合 Electron。&lt;/p&gt;

&lt;h2&gt;各式玩具&lt;/h2&gt;

&lt;p&gt;大概在四月左右，在學校選了永遠做不爛的&lt;a href=&quot;https://github.com/Yukaii/reversi-js&quot;&gt;黑白棋&lt;/a&gt;當題目，於網頁上重新實作（Team Project）。&lt;/p&gt;

&lt;p&gt;大概六七月在寫 Comics Reader 時開了 &lt;a href=&quot;https://livecoding.tv/yukaii/&quot;&gt;LiveCoding.tv 的直播&lt;/a&gt;，第一次享受當直播主，雖然自嗨放歌居多但也挺有趣的。&lt;/p&gt;

&lt;h2&gt;胎死腹中&lt;/h2&gt;

&lt;p&gt;六七月時漸漸的對 Redmine 專案管理工具上癮，無奈沒有一個非常現代的 App 可以用，跟同事&lt;a href=&quot;https://github.com/ChengHsuanLiu/redminePro&quot;&gt;開了個坑&lt;/a&gt;不過就這樣放到現在......&lt;/p&gt;

&lt;p&gt;其它還有從 NTU Garage Demo Day 聽來的 &lt;a href=&quot;https://github.com/Yukaii/IgHero/issues/1&quot;&gt;Idea&lt;/a&gt; 啦、從 Reddit AppIdeas 版幹來的 &lt;a href=&quot;https://github.com/Yukaii/read-n-share/issues/1&quot;&gt;Idea&lt;/a&gt; 等等。&lt;/p&gt;

&lt;h2&gt;總結&lt;/h2&gt;

&lt;p&gt;總的來說 2016 是我自稱前端工程師&lt;strong&gt;花式練手招搖撞騙&lt;/strong&gt;的一年，可惜的是作品平均完成度就差不多六七成上下，坑開的多，做完的少。因為時間有限又常常有緊急主線任務，一個個 Context Switch 間，原專案的衝刺週期斷了線，頓時失去維護前一個專案的拼勁。（怎麽說的好像 Side Project 才是我的本業 XDDD）&lt;/p&gt;

&lt;p&gt;前端大環境 Hype Driven Development 之下也讓我幾乎沒有忠誠度，反正就挑順手的，遵守拼湊型軟體工程師的教條，成品有出來就好。雖然也有對少數開源 Library 做點貢獻，但跳來跳去之下總沒有對框架工具深入研究，甚至發展出自己的，工程水平沒多少長進。&lt;/p&gt;

&lt;p&gt;另外，儘管做這些 Side Projects 之初，幾乎是以完整產品為目標開發的，但後續的打磨以及推廣宣傳幾乎沒達成，大多當成自己的玩具，除了噗浪桌面版 Puraku 好不容易有在臉書前端社群貼過一次文（好笑的是貼完就沒 commit 了）。&lt;/p&gt;

&lt;p&gt;對 2015 年的我來說，或許 2016 是個充滿驚喜的一年，在如此多產是 15 年的我無法企及的；不過說到底，工程師的價值也不在這種地方，只能說是興趣驅使吧。雖然文章開頭說了「沒有展望沒有期待」，但還是小小期許一下，希望 2017 的我能在這條路上走的更深入些（&lt;del&gt;然後就被抓去當兵了&lt;/del&gt;）&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Jan 2017 00:00:00 +0800</pubDate>
        <link>http://yukaii.tw/blog/2017/01/01/my-2016-summary-as-a-developer/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2017/01/01/my-2016-summary-as-a-developer/</guid>
        
        
      </item>
    
      <item>
        <title>React Native Facebook Native Ads 奮鬥戰記</title>
        <description>&lt;h2&gt;Native Ads?&lt;/h2&gt;

&lt;p&gt;文章標題就出現了兩次 Native，實在有點拗口。關於甚麼是 Native Ads（原生廣告） 可以參見 Facebook 的&lt;a href=&quot;https://developers.facebook.com/docs/audience-network/native-ads&quot;&gt;官方說明&lt;/a&gt;，以下引用之：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;原生廣告能讓您在為應用程式設計完美的廣告單位時，掌控所有細節。透過「原生廣告 API」，您可決定廣告的外觀、風格、大小和位置。因為廣告的格式由您決定，所以廣告能與應用程式搭配的天衣無縫。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;簡單來說就是「&lt;strong&gt;將廣告和你的 App 更好的整合&lt;/strong&gt;」，以期能帶來&lt;strong&gt;更多地的點擊&lt;/strong&gt;，&lt;del&gt;騙&lt;/del&gt;更多的使用者按下去，比如最常見的就是你大狄卡留言區塊藏著的業配廣告啦，還有 twitter、Facebook 各平臺偽裝成一般貼文廣告等等。&lt;/p&gt;

&lt;h2&gt;React Native Integration&lt;/h2&gt;

&lt;p&gt;React Native 把網頁開發的體驗帶到 App 上，不過 Facebook 沒有提供官方版的 Native Ads 模組，我們只好自行想辦法啦。我們這裡選擇的是 &lt;a href=&quot;https://callstack.io&quot;&gt;CallStack&lt;/a&gt; 提供的第三方模組：&lt;a href=&quot;https://github.com/callstack-io/react-native-fbads&quot;&gt;&lt;code&gt;react-native-fbads&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;

&lt;h2&gt;花式踩雷&lt;/h2&gt;

&lt;p&gt;先講結論：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;開源專案當覺得 README 寫的不痛快的時候，去看 example code，找出範例比你多寫的地方。&lt;/li&gt;
&lt;li&gt;有問題先看 Log。Native Module 的 Log 得用各平臺原生 IDE 看，比如 XCode 或 Android Studio。雖然不想開還是得開一下&lt;/li&gt;
&lt;li&gt;噴錯誤訊息時從上游(原生模組的來源)文件查起&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;SDK 設定&lt;/h3&gt;

&lt;p&gt;大多新版 React Native 原生模組的安裝都可以用 &lt;code&gt;react-native link xxx-module&lt;/code&gt; 搞定，不過有些時候卻沒啥用，跑完指令之後還需要手動設定。&lt;/p&gt;

&lt;p&gt;iOS 版 SOP：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;加入 &lt;code&gt;node_modules/xxx-module/ios/xxx.xcodeproj&lt;/code&gt; 到 Library&lt;/li&gt;
&lt;li&gt;把 Product &lt;code&gt;xxx.a&lt;/code&gt; 加到 Build Phase 裡&lt;/li&gt;
&lt;li&gt;若有額外引用 header，更新 Header search Path&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Android SOP:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;修改 &lt;code&gt;settings.gradle&lt;/code&gt;、&lt;code&gt;build.gradle&lt;/code&gt;、&lt;code&gt;MainApplication.java&lt;/code&gt; 等&lt;/li&gt;
&lt;li&gt;檢查 &lt;code&gt;AndroidManefist.xml&lt;/code&gt; 需不需要修改&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大 GUY 是這樣，&lt;del&gt;react-native-fbads 的 README 就有些簡單，關於 Android 的寫的也不多，算是一個大坑，AndroidFanefist 的修改還是看他們範例才發現的，不知道到底寫在文件的哪裡，若有人知道希望可以回報下讓我瞭解（感謝）&lt;/del&gt;。原生如果設定到 Build 成功，而且引入之後沒有噴錯基本上就 OK 了。若還有其它錯誤可以視為上游問題或 Native 層的問題（汗）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;更新：結果就寫在 README 裡，眼殘崩潰，不過還是給我遇到個新坑，參見 &lt;a href=&quot;https://github.com/callstack-io/react-native-fbads/issues/17#issuecomment-269749636&quot;&gt;callstack-io#17 (comment)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;Audience Network 驗證流程&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/wbd3rYblzS8AnyIt1KPeYJcJW3oKcmk55Fa2K5wZj5d6mIkJ4Ir627vhrE4f7b3ukiim7pI92nZhZADT4C7quX_siaYWwUEOS0xeqsGpkz9k0OBHg9KGp_4xlUx0osVB_HUO4ZBb4sdziMM0bMXP7UgT1WlXx1ysG1XTcN5EHeLdtpBzBq-YUnK3yZ_gSaPJo6CusCaehMkym9FRr4hRBjyfVol4tMwZdzmtALbKMqhaiqfDkYuX8vsEeDp9Og2WhZSdigzVH8Q085LBg2AV0aG3-c5OXna50HavXEiE_T5baB-zPKoWlKiqDgflAM32_Br9DcXGxdHh7FxA6u7yS5I7Zj_Q1w5Ff_6Eo7RufuwkjnTyDxq8Y_PexEU2QhQmYAMjFNLkCQlzxzV6BRtb8oDOFc5c20c1OI2k7gagkVwXeUKfA1RBjihghVrpVMhCSbHiGohKA2ntI8Il6iXqcABQ0MWU90EmXJZaEsO7D9UU0VwC_GFWAw4aYvRQCTw7hLAm9FTQvS4okPGR47OmJpyXrf7l0Qv8VrgCEiigZos6NfmGceeBRkj8xBhv63F7WjGmT_He5DUtk8I6yce6_WRh8XQ0HwKJnkX19EHZqk02oDxzqy9PTw=w801-h353-no&quot; alt=&quot;audience-network-stage&quot;&gt;&lt;/p&gt;

&lt;p&gt;Audience Network 分成好幾個驗證階段，簡略過程如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;拿到版位 Placement ID 之後編寫 App 顯示廣告的程式碼&lt;/li&gt;
&lt;li&gt;在 Audience Network 新增應用程式
3. 用「原生模擬器」（iOS 就 Simulator，Android 要用 AVD）傳送廣告要求&lt;/li&gt;
&lt;li&gt;等待應用程式審核通過&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其中第三點「&lt;strong&gt;傳送廣告要求&lt;/strong&gt;」是最多雷的，iOS 早早就審核過了，Android 怎麽發要求 Facebook 就是無法接到，最後改用 Android Studio 原生的模擬器就一次 OK，原來是沒法用 Genymotion 的模擬器跑...&lt;/p&gt;

&lt;p&gt;最後上 TestFlight 之後在我自己手機上無法顯示，查了一下錯誤代碼 &lt;a href=&quot;https://developers.facebook.com/docs/audience-network/testing&quot;&gt;1001 - No Fill&lt;/a&gt;，發現原來是手機上沒有安裝 &lt;strong&gt;原生 FB App&lt;/strong&gt;，難怪我 Dcard 從來沒看過廣告 XDD，以下是其它不會顯示廣告狀況，從文件引用：&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Error 1001 - No Fill. May be due to one or more of the following:&lt;/li&gt;
&lt;li&gt;User not logged into Native Facebook App on Mobile Device&lt;/li&gt;
&lt;li&gt;Limit Ad Tracking turned on (iOS)&lt;/li&gt;
&lt;li&gt;Opt out of interest-based ads turned on (Android)&lt;/li&gt;
&lt;li&gt;No Ad Inventory for current user&lt;/li&gt;
&lt;li&gt;Your testing device must have the native Facebook application installed.&lt;/li&gt;
&lt;li&gt;Your application should attempt to make another request after 30 seconds.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 22 Dec 2016 00:00:00 +0800</pubDate>
        <link>http://yukaii.tw/blog/2016/12/22/react-native-facebook-native-ads-integration/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2016/12/22/react-native-facebook-native-ads-integration/</guid>
        
        
      </item>
    
      <item>
        <title>Electron 的 Trello 桌面版應用程式</title>
        <description>&lt;h2&gt;啊 Electron 不就好棒棒&lt;/h2&gt;

&lt;p&gt;Electron 簡單來說就是加料版的 Chromium，可以跑 node 環境，還能讓 Web App 也能使用原生桌面環境的 API。現在你我的桌面早就被一堆 Web App 攻佔，比如我最常用的：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nylas.com/&quot;&gt;Nylas N1&lt;/a&gt; - Email 軟體&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; - 微軟出的輕量級編輯器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.getpostman.com/&quot;&gt;Postman&lt;/a&gt; - REST 測試御用輔助工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://slack.com/&quot;&gt;Slack&lt;/a&gt; - 社內通訊&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.notion.so/&quot;&gt;Notion&lt;/a&gt; - 筆記，雜想&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hyper.is/&quot;&gt;Hyper&lt;/a&gt; - 終端機，不過不能輸入中文所以就沒再用了。開發的 &lt;a href=&quot;https://github.com/zeit&quot;&gt;zeit&lt;/a&gt; 社也滿猛的&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sindresorhus/caprine&quot;&gt;Caprine&lt;/a&gt; - Facebook messenger 桌面版&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;隨便列就一堆了，相當於電腦裝了十幾個網頁瀏覽器，有夠肥一個就一百多 MB 😅，根本快速開發的代價。&lt;/p&gt;

&lt;p&gt;Web App 相對於傳統的桌面軟體迭代應該算十分快速了啦，光 Flexbox Layout 就不知道方便多少了...好啦其實我唯一寫過的傳統桌面軟體也只有用 JavaFX 學校作業，也只花了三天趕工哈哈哈...也是沒慢到哪裡去啦，咦？&lt;/p&gt;

&lt;h2&gt;Nativefier&lt;/h2&gt;

&lt;p&gt;有段時間我很喜歡用瀏覽器的「Pin Tab」功能，現在 SPA 又那麼猖狂，App 用 Chrome 開就行了，只要用 Chrome 的快速鍵 cmd + 1/2 就直接跳回前幾個 pin 好的 App。不過因為使用的 Extension 實在有點多，所以常常感到 Chrome 頓挫，此時用 Electron App 就相當於用一個乾淨的瀏覽器，速度快了許多。&lt;del&gt;其實你把 Extension 移乾淨不就得了。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;社群前陣子也有大大推了一個叫 &lt;a href=&quot;https://github.com/jiahaog/nativefier&quot;&gt;&lt;code&gt;nativefier&lt;/code&gt;&lt;/a&gt; 的工具，只要設定一下，就能把網站包到 Electron 的 WebView，立馬變桌面 App。&lt;/p&gt;

&lt;p&gt;通常我們在實作這種網頁直接包成 App 的，除了單純用 Electron &lt;code&gt;BrowserWindow&lt;/code&gt; 或 &lt;code&gt;webview&lt;/code&gt; API 載入 Web App 網址外，還需要 inject 一些額外的 JavaScript 來整合桌面功能，比如快捷鍵跳轉特定功能啦、改變配色啦。&lt;/p&gt;

&lt;p&gt;大神 sindresorhus 的 &lt;a href=&quot;https://github.com/sindresorhus/caprine&quot;&gt;Caprine&lt;/a&gt; 便是個好例子，還有 terkelg 的 &lt;a href=&quot;https://github.com/terkelg/ramme&quot;&gt;Ramme&lt;/a&gt;，單純的改變原本就已經用 React 做成 SPA 的 Instagram 的排版，也加入了快速鍵功能，便是一個堪用的 Instragm 桌面應用軟體了。當然真正好用的 IG 桌面 App 還是非原生莫屬，在此推薦一下 &lt;a href=&quot;https://itunes.apple.com/us/app/flume-for-instagram/id792425898&quot;&gt;Flume for Instagram&lt;/a&gt;。&lt;/p&gt;

&lt;h2&gt;Trello feat. Electron&lt;/h2&gt;

&lt;p&gt;最近重回 Trello 懷抱。為配合我的使用習慣，就找了找對應的桌面軟體，找到了兩個：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://friendlyfox.es/pawsfortrello/&quot;&gt;Paws for Trello&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/danielchatfield/trello-desktop&quot;&gt;Trello Desktop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;這兩個 App 幾乎一樣，就是把 macOS 的 titlebar 藏起來讓紅綠燈好看一些。儘管前者在 App Store 上架，可是功能沒比後者多多少哈哈。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/gDwO7Rcc_DiHTqNTa9W8_u5WggQxm1km4TL630k66fGucUYCKoU4PEjqVodsSsB5wtw1rHket9Mnh-2qSyPWIU0Nn0TZsoLOitMniwifs2JFkgQJysppEK0rTDsPasRDvj1-axpA6oEanesF-42NvwTAWxeVmN-SjspdOPUxgdj8P9LkJPHACA49dCYXPfHrfbqP_SsFYKL7FlReq9b0Xbs5VWQmCPlWewyN12bZQq7-j3_POwhXRwPqFwvb5zfx9in7AibIxgz5wQAgNR-TUVwiPvN0nKIX5XrMVPCLHOgsHsIeFfQuHZuJaJ56kZ5kc-t9m11F5x0_BB6uoODrHd8UEumqEDA9hHGh8P4jnVMXYXmBZjGCcpSaIK_076JKVgUZ_cVxzcC_oDa0_YfS4Si-9qbT8RKEK-AMhvNKYVhsJ6z1N1ZCeG4O57uqmn0TzM6iBMQ_01LXYt1Db4AQxRdoE7m5PgbUU-WOkN_ZhJhRFcsIDxLoZT9gngSJlAZJT0j9t0G9hniF5uImwh7onklliQayTsA8N9PpJc-CpkrVjko3WjAbXyNqzrdm1QCDScI0PV2cEhFy4BJvsFFfZUrXl1W7PdYJJKHYfVUTRrDeAIIfiQ=w971-h626-no&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;後者 Trello Desktop 雖然免費，目前有個最大的問題：沒辦法&lt;a href=&quot;https://github.com/danielchatfield/trello-desktop/issues/6&quot;&gt;拖拉視窗&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;當然也有開發者直接發了 &lt;a href=&quot;https://github.com/danielchatfield/trello-desktop/pull/13&quot;&gt;Pull Request&lt;/a&gt; ，不過專案好像已經被放生了一樣，坑主都不回的。作為一個略懂 Electron 的開發者就來自行修正一下吧。&lt;/p&gt;

&lt;p&gt;仔細看下 &lt;a href=&quot;https://github.com/danielchatfield/trello-desktop/pull/13&quot;&gt;PR&lt;/a&gt; 其實也就加三行 css，我們要做的就是把這個 PR，patch 到我們本機的 Trello Desktop App 裡。&lt;/p&gt;

&lt;p&gt;做法有兩種，其中一種是 clone 改完的版本，重新建構 Electron App，不過太麻煩了，我們就直接 patch 本機的 css 比較快。&lt;/p&gt;

&lt;h2&gt;Patch Elecron Client code&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/electron/asar&quot;&gt;asar&lt;/a&gt; 簡而言之就是 electron 封裝 client code 的格式，一般在建構 Electron App 會預設使用。我們先安裝下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm install asar -g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;現在就可以解開 asar 檔了，進到 App Package 裡：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /Applications/Trello.app/Contents/Resources/
asar extract app.asar app &lt;span class=&quot;c&quot;&gt;# 解開 app.asar 檔案到 app 目錄&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;app &lt;span class=&quot;c&quot;&gt;# 進去 app 目錄&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;編輯 &lt;code&gt;browser.css&lt;/code&gt; 加入更改的 css&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#header&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;-webkit-app-region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Electron 預設便會讀 app 目錄或 app.asar 檔案，重新開啟 App 後就可以自由移動視窗啦，跟桌面軟體有 87% 像！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/w7WF_SiDo7mrJanSRR72ieb_NTOPpblGcK-nMovxrnQvAG_1fcKuZ_EhIC_5_8-kXSIztIoEMk3l2gqoNlQx8VOS1UW98E6YVlBqV8qJOLD7YPAeY_eVZWWpdHkbtuBQh3O5g_xcFU-_IiHlVOcDVWiAdfdQipK7AmN7RHNs5fuTMLEo4ZDRZGH3ic9u92FT4A8n2z75P9y7kWMmYhQ_lyuFWaOSyxwXke_iJR0UY9L1uMnW856i651cuQNlp2br9rGAB-LSGKElDQpI64h2HxTk9eln2tMcvMG1SO9Qz6AF7kcbFanCL7uKv1AoGGX81qlGugiUtkq_I8uNASIVbPaeVxSdJniKa46DJuc-twautw6qdHUQ5jgpJyKOmUtbosVeJK5DS50jrsGzyOQPVbH7SzVpavlpKqnUAxOZ9AEAsxX0sf6cROCPtvHe3UvUqSTEwXk841vTgoxrS27ysLXVRVhdZe8CEE5vSbDIIObdHkV0CVULCWRKspmFInNEd4m-cvE4pHWdycItvMJo7dqN5gydHPIBZzU7z50b8Hn2_wYzUA7miYPvpMpOmsaW4BSOwkW1bPHGG0_2mf0gGWlR8URwayBvSouObSCoaDDGostsNw=w1188-h737-no&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://yukaii.tw/blog/2016/11/12/patching-trello-desktop-electron-app/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2016/11/12/patching-trello-desktop-electron-app/</guid>
        
        
      </item>
    
      <item>
        <title>在 Electron 使用 IPC 串聯前端和 Node API</title>
        <description>&lt;p&gt;這是我最近在實作噗浪 electron app - &lt;a href=&quot;https://github.com/puraku/client&quot;&gt;&lt;strong&gt;Puraku&lt;/strong&gt;&lt;/a&gt; 時，使用的抽象化寫法。&lt;/p&gt;

&lt;p&gt;先談一下背景。其實在官方的 &lt;a href=&quot;https://www.plurk.com/API&quot;&gt;Plurk API&lt;/a&gt; 頁面上就已經有 &lt;a href=&quot;https://github.com/puraku/purakujs&quot;&gt;JavaScript 的噗浪 API Library&lt;/a&gt;了，不過它沒有包成 npm 可以直接使用，而且還相依於 &lt;a href=&quot;https://github.com/ciaranj/node-oauth&quot;&gt;node-oauth&lt;/a&gt; 套件，看名字就知道和 Node 有關。&lt;/p&gt;

&lt;p&gt;這次寫的 &lt;a href=&quot;https://github.com/puraku/client&quot;&gt;puraku&lt;/a&gt; 是一個以前端為主的桌面軟體，所以我勢必要對噗浪的 API 套件做些改寫。&lt;/p&gt;

&lt;h2&gt;重新封裝 API Library&lt;/h2&gt;

&lt;p&gt;我已經包裝成 &lt;a href=&quot;https://github.com/puraku/purakujs&quot;&gt;purakujs&lt;/a&gt;，它是個可以直接使用的 Plurk API Node library，雖然這年頭也沒多少工程師在串噗浪 API 了 😅 。值得一提的是 yarn 對 &lt;code&gt;npm link&lt;/code&gt; 的支援不太好，在設定本機開發環境跑完 &lt;code&gt;npm link&lt;/code&gt; 後，不要在 &lt;code&gt;package.json&lt;/code&gt; 修改套件版本，防止在跑 &lt;code&gt;yarn install&lt;/code&gt; 指令時又噴錯。&lt;/p&gt;

&lt;h3&gt;Electron&lt;/h3&gt;

&lt;p&gt;關於 Electron 是啥便不再贅述。要知道的是只有在 Electron 的 Main Process 裡才可以呼叫 node 的 api，所以把 node-oauth 套件放在這跑是沒問題的，但 Renderer Process 才是主要觸發 API 的地方（換頁、捲動、按鈕等）。Electron 提供了 IPC 的 API 界面實作，可以這樣寫：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;commit &lt;a href=&quot;https://github.com/puraku/client/pull/5/commits/df4c8a225a36485747f7022b1391b50ee9e9f19c&quot;&gt;df4c8a2&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Renderer Process&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ipcRenderer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'electron'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ipcRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sendSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'puraku:api'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Main Process&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;ipcMain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'puraku:api'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;myApiClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;returnValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;returnValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Renderer Process 送出 API 請求到 Main Process，已經正在監聽的 Main Process 在呼叫完 API 請求(&lt;code&gt;myAPIClient.request&lt;/code&gt;)之後，返還資料給 Renderer Process。在這裡透過 ipcMain 建立叫做 &lt;code&gt;puraku:api&lt;/code&gt; 的事件監聽，由 &lt;code&gt;ipcRenderer&lt;/code&gt; 送出事件請求。&lt;code&gt;event.returnValue&lt;/code&gt; 是 ipc 的同步寫法。一旦使用同步，整個 Renderer Process 在送出事件請求(&lt;code&gt;ipcRenderer.sendSync&lt;/code&gt;)之後會被 Block，所以我改用非同步的 IPC 寫法，再用 Promise 封裝。&lt;/p&gt;

&lt;h3&gt;Asyncronous IPC&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;commit &lt;a href=&quot;https://github.com/puraku/client/pull/5/commits/3f2fee64664c4082520a3a8b9ffe6d90cb6cfdbd&quot;&gt;3f2fee&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Renderer Process&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ipcRenderer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'electron'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ipcRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'puraku:api'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;ipcRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;puraku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Main Process&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;ipcMain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'puraku:api'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;myApiClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;puraku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;puraku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這一版跟上面的差別在於，Renderer Process 送請求給 Main Process 之後，馬上建立另一個 IPC 的 Listener 等待 Main Process 回調，而 Main Process 在處裡完 API 請求之後(&lt;code&gt;myAPIClient.request&lt;/code&gt;) 再用 IPC 非同步寫法回傳資料(&lt;code&gt;event.sender.send&lt;/code&gt;)。在這個版本 IPC 關係變得比較複雜，簡單畫了一下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;Promise start  +-----+
                     |           Renerer Process                 Main Process
                     |
                     +-----&amp;gt; +--------------------+
                             |                    |
                             |  ipcRenderer.send  |
                             |                    |         +---------------------+
                             +------------------------------+                     |
                             |                    |         |  API request        |
                             |  ipcRenderer.once  |         |                     |
                             |                    |         |  event.sender.send  |
                             |  create listener   |         |                     |
                             |                    |         |                     |
                             +---------+----------+         +-----------+---------+
                                       |                                |
                                       |                                |
                                       |                                |
                             +---------+----------+                     |
                             |                    &amp;lt;---------------------+
                             |   Event received   |
                             |                    |
                     +-----+ +---------+----------+
                     |                 |
                     |                 |
 Promise end   &amp;lt;-----+                 |
                                       |
                                       |
                                       |
                                       |
                                       |
                                       |
                                       |
                                       |
                                       v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;IPC 事件一對一對應&lt;/h3&gt;

&lt;p&gt;可以發現在這一版的 Renderer Process 我加了一個 &lt;code&gt;timestamp&lt;/code&gt; 來簡單的區分不同的 API request，因為如果光用 API 的 Endpoint 當做事件的鍵值，戳相同 API 兩次時就會衝到。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eventKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;puraku&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不過卻發現每次取的 timestamp 還是有機會一樣，經過 Google 之後我把 &lt;code&gt;timestamp&lt;/code&gt; 亂數的產生方法改成 &lt;code&gt;performance.now()&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomSeed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;performance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eventKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;puraku&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;randomSeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到這裡，我們就可以用熟悉的 Promise 介面，在 Renderer Process 輕鬆地串接 Main Process 的 API 啦！以下是目前的實作：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Renderer Process&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ipcRenderer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'electron'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomSeed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;performance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ipcRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'puraku:api'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomSeed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;ipcRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;puraku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;randomSeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Main Process&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ipcMain&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'electron'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;ipcMain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'puraku:api'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomSeed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;myApiClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;puraku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;randomSeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;puraku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;randomSeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 Renderer Process 裡（在我的例子裡是 Vue 前端 App）就可以用簡單的介面來呼叫 API 啦！&lt;/p&gt;

&lt;h2&gt;其它&lt;/h2&gt;

&lt;p&gt;聽說用 message queue 來實作比較好，不過 It works for now，就暫時沒有更新實作的動力（懶）&lt;/p&gt;

&lt;p&gt;可以在 &lt;a href=&quot;https://github.com/puraku/client/pull/5&quot;&gt;puraku/client PR#5&lt;/a&gt; 閱讀實作的過程。自從對 Redmine 上癮之後，連 GitHub Flow 也一併愛上了，在本 Repo 一個功能就開 Branch 做成 Pull Request，就算一個人的 GitHub Flow 也能玩的愉悅 XD&lt;/p&gt;
</description>
        <pubDate>Wed, 02 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://yukaii.tw/blog/2016/11/02/use-electron-ipc-to-call-api-from-main-process/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2016/11/02/use-electron-ipc-to-call-api-from-main-process/</guid>
        
        
      </item>
    
      <item>
        <title>開源貢獻初體驗</title>
        <description>&lt;h2&gt;第一次的 PR&lt;/h2&gt;

&lt;p&gt;在兩個月前的暑假，還在努力當個 Rails 工程師的我，為了進行我社產品的重構，想先找個專案練練手。當時 VSCode 開源專案管理的 GithHub 令我好生羨慕，覺得所有的開源專案，如果都能如此有條理的讓人參與貢獻，那該有多好呀。我找了找 Rails 專案，發現之前有在關注的校園專案 &lt;a href=&quot;https://plus.nctu.edu.tw/&quot;&gt;NCTU+&lt;/a&gt; 當時也在進行改版。&lt;/p&gt;

&lt;p&gt;clone 下來看了看，發現 rubocop 上色還挺多的，於是就想也沒想開始玩了起來。煞有介事的開了個 &lt;a href=&quot;https://github.com/Yukaii/nctuplus/issues/1&quot;&gt;issue&lt;/a&gt;，描述專案多有技術債云云，列出了各式 Todo。首先著手的就是升級 Rails，並且把過時的套件都升級一番。&lt;/p&gt;

&lt;p&gt;經過了兩天的折騰後，送出了第一支 &lt;a href=&quot;https://github.com/nctuplus/nctuplus/pull/6&quot;&gt;Pull Request&lt;/a&gt;。結果就失敗了 XD。&lt;/p&gt;

&lt;h2&gt;自我愉悅&lt;/h2&gt;

&lt;p&gt;我想了想，覺得當時的問題有三：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;PR 太大包&lt;/li&gt;
&lt;li&gt;對 Roadmap 不瞭解&lt;/li&gt;
&lt;li&gt;沒有測試&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最後再附加一個，太自我中心，加了一堆東西卻又沒有附上 Getting Started。&lt;/p&gt;

&lt;p&gt;當時我覺得 PR 太大包，其實現在看來也還好，因為「順便」把重複的目錄移除，所以 Git 更改看起來比較多。但是這「順便」就是問題所在了。在跑 GitHub Flow 時，Feature branch 應該單一目的，我雖然 PR 名為「升級 Rails/Ruby/gems」，實際上還是混雜了&lt;a href=&quot;https://github.com/nctuplus/nctuplus/pull/6#issuecomment-238025911&quot;&gt;多個目標&lt;/a&gt; ，現在看來有點可惜。&lt;/p&gt;

&lt;p&gt;對 Product Roadmap 的不瞭解這部分，其實也算該專案的特性。校園團隊的運作方式，大概是&lt;a href=&quot;https://www.facebook.com/nctuplus/posts/1069989203046912&quot;&gt;徵才&lt;/a&gt; 後大家一起共同成長，所以 Roadmap 既沒有公佈在 GitHub 也沒有在粉專，我這個亂入的傢伙，照著自己意圖亂升級，終究也只是自己的實驗 XD。&lt;/p&gt;

&lt;p&gt;最後一點關於測試，其實專案本身就沒啥測試 XD，所以&lt;a href=&quot;https://github.com/nctuplus/nctuplus/pull/6#issuecomment-238018884&quot;&gt;幫忙 Review 的同學&lt;/a&gt;也有提到，我的 PR 還需要花大把的時間確認能不能運作。這對於當時還在衝刺功能的 NCTU+ Team 來說，確實是個沒有必要的 PR。&lt;/p&gt;

&lt;p&gt;總結一下，我既不熟悉 NCTU+ 團隊的運作方式，開出的問題也是假議題（沒必要升級呀），還需要花大把的成本驗證，那這個 PR 就完全是自嗨嘛 :p。&lt;/p&gt;

&lt;h2&gt;於是跑來寫 JavaScript&lt;/h2&gt;

&lt;p&gt;在大約一個月前&lt;del&gt;把自己開除&lt;/del&gt;轉職回學生之後，除了玩弄下 &lt;a href=&quot;https://mitpress.mit.edu/sicp/&quot;&gt;SICP&lt;/a&gt; 之外，另一項規劃就是把幾個月前開的坑 &lt;a href=&quot;https://github.com/ComicsReader/reader&quot;&gt;Comics Reader&lt;/a&gt; 補了補進度。該專案也是 &lt;a href=&quot;https://github.com/zeroshine/ComicsScroller&quot;&gt;fork&lt;/a&gt; 來的，不過到後來幾乎整個重寫，除了一樣是用 &lt;a href=&quot;http://www.material-ui.com/&quot;&gt;Material-UI&lt;/a&gt; 界面配色照著改之外，還多了一卡車東西。&lt;/p&gt;

&lt;p&gt;起初想要 fork 是因為與其砍掉重練專案，不如發 PR 給原專案，一步步&lt;del&gt;入侵&lt;/del&gt;影響原專案，把它變成自己的形狀。要知道重寫專案成本也是很大的，現在輪子這麼多就別再造了啦，而且原本的插件我也用的很開心。儘管如此，每個人還是都有自己的主觀意識&lt;del&gt;工程師的浪漫&lt;/del&gt;，這世界的輪子才這麼多，我終究還是重造了船 😂。&lt;/p&gt;

&lt;h2&gt;跳入神坑 HackMD - The Realtime Collaborate Markdown Platform&lt;/h2&gt;

&lt;p&gt;Comics Reader 寫著寫著，對於 JavaScript 這奇妙&lt;del&gt;垃圾&lt;/del&gt;語言的熱情也回來了，也想跳個坑玩一下。常在 &lt;a href=&quot;http://join.g0v.today/&quot;&gt;g0v slack&lt;/a&gt; 潛水的我注意到 hackfoldr 常常拿來搭配 &lt;a href=&quot;https://hackmd.io&quot;&gt;HackMD&lt;/a&gt; 使用，一個支援多人即時協作的線上 Markdown 編輯平臺。看了看 &lt;a href=&quot;https://github.com/hackmdio/hackmd&quot;&gt;GitHub Repo&lt;/a&gt;，發現技術架構剛好與我目前的技能表吻合，那就開始貢獻吧！&lt;/p&gt;

&lt;h2&gt;為 Legacy JavaScript 導入 Webpack&lt;/h2&gt;

&lt;p&gt;經過幾個開發流程改進的 PR 後(&lt;a href=&quot;https://github.com/hackmdio/hackmd/pull/187&quot;&gt;#187&lt;/a&gt;、&lt;a href=&quot;https://github.com/hackmdio/hackmd/pull/190&quot;&gt;#190&lt;/a&gt;)，我開始&lt;a href=&quot;https://github.com/hackmdio/hackmd/pull/195&quot;&gt;導入 Webpack&lt;/a&gt; 前端打包器。&lt;/p&gt;

&lt;p&gt;此時我對 JavaScript 的理解還停留在 React 這種 SPA 應用上，於是把許多 vendor package 都轉到 npm，然後在進入點引用進來，產生的 JS Bundle 也隨著引用的套件增加而擴大。我後來才理解到把常用的 vendor 放在 CDN 才是好的優化方法，因為瀏覽器會幫你快取，於是我又慢慢地把放到 npm 的套件在 extract 出來，簡直是繞了一大圈啊（汗）。&lt;a href=&quot;https://github.com/hackmdio/hackmd/pull/195&quot;&gt;#195&lt;/a&gt; 就記錄了這過程。&lt;/p&gt;

&lt;p&gt;隨著這份 PR 越來越大包，我也開始覺得緊張，要是合併回去之後，功能通通炸掉怎麽辦？結果確實也是如此，我另外花了 &lt;a href=&quot;https://github.com/hackmdio/hackmd/pull/202&quot;&gt;#202&lt;/a&gt;、&lt;a href=&quot;https://github.com/hackmdio/hackmd/pull/205&quot;&gt;#205&lt;/a&gt;、&lt;a href=&quot;https://github.com/hackmdio/hackmd/pull/206&quot;&gt;#206&lt;/a&gt; 三個 PR 來把大部分的功能修復 😅。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hackmdio/hackmd/pull/195&quot;&gt;#195&lt;/a&gt; 做出改變實在太大了，當時也是邊做邊找資料學習，於是發生了這種繞圈子的意外。好險原作者 jacky 非常 nice 的接受了 PR，也一起確認了各功能是否運作正確 😂。現在上線的版本就是小弟我加料過的，實在緊張刺激 XD。&lt;/p&gt;

&lt;h2&gt;更多的 PR，更多的 Open Source&lt;/h2&gt;

&lt;p&gt;跳入一個新專案，從 run 起來開始瞭解架構，然後開始惡搞，這就是我最近在幹的事。時常有「挖坑給自己填」之感，這就是&lt;em&gt;惡搞系工程師&lt;/em&gt;的人蔘啊。&lt;/p&gt;

&lt;p&gt;最後再推一下 &lt;a href=&quot;https://hackmd.io&quot;&gt;HackMD&lt;/a&gt; 這個專案，作者 jacky 在設計上實在加入許多巧思，希望有一天能長成工程師每天用的筆記軟體，繼續填坑讓專案更好！&lt;/p&gt;
</description>
        <pubDate>Mon, 17 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://yukaii.tw/blog/2016/10/17/contributing-to-open-source/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2016/10/17/contributing-to-open-source/</guid>
        
        
      </item>
    
      <item>
        <title>用 jadx 來玩玩 Android 逆向工程</title>
        <description>&lt;h2&gt;你幹嘛沒事要來逆向工程啦&lt;/h2&gt;

&lt;p&gt;&lt;del&gt;就是因為沒事啊&lt;/del&gt;。呃不對，其實以前就有聽說過 Android 逆向工具很成熟，不過自從換 iPhone 後就沒怎麼關注 Android 發展了，一直沒機會玩到。&lt;/p&gt;

&lt;p&gt;昨天下午剛好就在臉書刷到一款課表 App，就簡稱為 「X 社小工具」好了，可以幫你匯入學校的課表，支援多個學校。看了看截圖，感覺是在手機端輸入校務系統登入帳密達成，X 社小工具會幫你抓下來，只是不知道後面 API 怎麽跑（誰知道）。秉持著好奇的心，就讓我來逆向看看吧 XDDD。&lt;/p&gt;

&lt;h2&gt;沒手機也要下載 APK&lt;/h2&gt;

&lt;p&gt;直接把 APK 的 bundle id 貼到 &lt;a href=&quot;https://androidappsapk.co/apkdownloader/&quot;&gt;androidapk&lt;/a&gt; 這個網站就可以下載了，bundle id 長得像 &lt;code&gt;com.facebook.katana&lt;/code&gt;。&lt;/p&gt;

&lt;h2&gt;jadx 反編譯工具&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/bd3c0ea851c23c4535e43590a86c940a0786faa6/687474703a2f2f736b796c6f742e6769746875622e696f2f6a6164782f6a6164782d6775692e706e67&quot; alt=&quot;jadx&quot;&gt;&lt;/p&gt;

&lt;p&gt;借一下&lt;a href=&quot;https://github.com/skylot/jadx&quot;&gt;官方&lt;/a&gt;的截圖，&lt;a href=&quot;https://github.com/skylot/jadx&quot;&gt;jadx&lt;/a&gt; 可以直接開啟 apk 檔，把 decompile 過的原始碼顯示出來；除了 gui 界面也有 command line 工具可以讓你直接轉存 source。&lt;/p&gt;

&lt;p&gt;載下來解壓縮後有四個檔案：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;.
├── jadx
├── jadx-gui
├── jadx-gui.bat
└── jadx.bat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; 進去目錄後執行 &lt;code&gt;./jadx-gui&lt;/code&gt;，GUI 界面開啟照著操作，選擇你要解開的 apk 就會顯示 Java code 了，也可以選擇轉存，用你喜歡的 Editor 或 IDE 開起來。&lt;/p&gt;

&lt;h2&gt;讀讀讀讀讀 code&lt;/h2&gt;

&lt;p&gt;不像當初 &lt;a href=&quot;https://applidium.com/en/news/unbundling_pokemon_go/&quot;&gt;Pokemon Go 被逆向&lt;/a&gt; 一樣，竟然連個混淆都沒做，X 社小工具解出來的原始碼裡，變數都被換成英文字母 abcde，不過想想我的目的就是拿到 API，就直接搜尋 &lt;code&gt;http://&lt;/code&gt;、&lt;code&gt;https://&lt;/code&gt; 網址開頭的字串~~&lt;/p&gt;

&lt;h3&gt;Retrofit&lt;/h3&gt;

&lt;p&gt;然後就找到了這段：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Retrofit&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asVar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://容我隱藏一下.appspot.com/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addConverterFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GsonConverterFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addCallAdapterFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RxJavaCallAdapterFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;callbackExecutor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AsyncTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;THREAD_POOL_EXECUTOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asVar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看網址 Server 還是用 Google App Engine 架的 XD&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://square.github.io/retrofit/&quot;&gt;Retrofit&lt;/a&gt; 是 Android 用的 HTTP 客戶端，雖然沒用過，不過對於 Retrofit 用 Decorator 標記各個 Endpoint 的寫法印象很深，Retrofit 首頁的範例就這樣寫：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GitHubService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;users/{user}/repos&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listRepos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下來只要再找出各式 Decorator 就行啦！&lt;/p&gt;

&lt;h3&gt;API Endpoints&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;schools&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;login&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Body&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eVar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;users/{uid}/schedule&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;uid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面是其中一段程式碼，看起來主要的 API Endpoint 都在這了。&lt;/p&gt;

&lt;p&gt;接下來可以用 &lt;code&gt;curl&lt;/code&gt; 或 &lt;a href=&quot;https://www.getpostman.com/&quot;&gt;Postman&lt;/a&gt; 來試打 API，從 GET 的 Endpoint 開始，照著 Login 流程做。不過打 schedule API 的時候卻發現重大問題：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我的課表根本就沒課啊！！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以 &lt;code&gt;schedule&lt;/code&gt; 只好當做不知道怎麽解了哈哈哈😂&lt;/p&gt;

&lt;h3&gt;RxJava&lt;/h3&gt;

&lt;p&gt;題外話一下，X 社小工具也用了當紅的 Reactive Programming，反編譯後的原始碼就看到一堆短短的 presenter 檔案。&lt;/p&gt;

&lt;h3&gt;其實要拿 API 也不需要反編譯&lt;/h3&gt;

&lt;p&gt;可以用 &lt;a href=&quot;https://www.wireshark.org/&quot;&gt;Wireshark&lt;/a&gt; 之類的封包擷取工具撈一下，不過還是看原始碼直接啦😅&lt;/p&gt;

&lt;h2&gt;感想&lt;/h2&gt;

&lt;p&gt;看來 ProGuard 一類的混淆工具還是有用的，變數、類別都被換掉，腦內理解搜尋速度至少慢了十倍啊，還沒辦法直接 Go to Definition...&lt;/p&gt;

&lt;p&gt;本來想寫個免責聲明，不過敏感資訊都已經藏起來了，應該還好吧 XD 這篇只是個人純粹玩工具、讀讀 code 的心得而已，不要追殺我啊 😂😂😂&lt;/p&gt;
</description>
        <pubDate>Fri, 23 Sep 2016 00:00:00 +0800</pubDate>
        <link>http://yukaii.tw/blog/2016/09/23/play-android-reverse-engineering-with-jadx/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2016/09/23/play-android-reverse-engineering-with-jadx/</guid>
        
        
      </item>
    
      <item>
        <title>Rails Girl #7</title>
        <description>&lt;p&gt;有幸在第七屆的 Rails Girl 活動中擔任教練，就來寫寫感想好了 w&lt;/p&gt;

&lt;p&gt;在當 Rails Girl 教練之前，我雖然「算是」有帶過幾位實習生，不過跟這種馬拉松式的教學完全不同，平常都不太說話的我，這兩天竟都沒怎麽停嘴，也真佩服自己了 😅&lt;/p&gt;

&lt;h2&gt;Day 1 - 裝機&lt;/h2&gt;

&lt;p&gt;對於這種體驗性質的活動，浪費時間在安裝開發環境就太可惜了。主辦的大大在會前教練通知信裡寄了一份 &lt;a href=&quot;https://codeanywhere.com/&quot;&gt;CodeAnywhere&lt;/a&gt; 網站的說明。如同名字所述，CodeAnywhere 可以讓你 &lt;strong&gt;Code Anywhere&lt;/strong&gt;（在哪裡都能寫程式），運用 Linux Container 和 Web 技術，使用瀏覽器便能連接機器、開發網站服務。只可惜 Bug 還是挺多的，比如說：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;無法做到即時 Filesystem Refresh，每次新增檔案後，都要手動重新整理專案，新增的資料夾才會出現在列表&lt;/li&gt;
&lt;li&gt;Terminal SSH Session 在重新整理瀏覽器後不會自動 kill，所以開啟的 Rails server 佔用 port，但 terminal tab 已經消失，需要找出 pid 後 kill 掉（&lt;code&gt;lsof -i tcp:3000&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;在 Terminal 界面無法使用貼上快捷鍵（&lt;code&gt;Ctrl + v&lt;/code&gt; or &lt;code&gt;CMD + v&lt;/code&gt;），對於經常性 Copy &amp;amp; Paste 的這堂課來說十分不便呀&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;附上 rails 簡易裝機指令，無論是 CodeAnywhere 環境或是 Ubuntu/macOS 應該都能使用。Ubuntu 需要事先安裝好 Git，macOS 則需安裝 XCode Developer Tools。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
&lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;url -sSL https://get.rvm.io | bash -s stable

rvm reload
rvm install 2.3.1
rvm use 2.3.1 --default

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'gem: --no-ri --no-rdoc'&lt;/span&gt; &amp;gt;&amp;gt; ~/.gemrc &lt;span class=&quot;c&quot;&gt;# 不需要安裝 rdoc&lt;/span&gt;

gem install bundler
bundle config --global --jobs 4

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'source &quot;https://rubygems.org&quot;
ruby &quot;2.3.1&quot;
gem &quot;rails&quot;
'&lt;/span&gt; &amp;gt;&amp;gt; ~/Gemfile

&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 切換至家目錄&lt;/span&gt;
bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;個人認為裝機階段實在也不需要特別解釋，說明一下 Ruby 和 Rails 的關係和豐富的套件生態系就行了&lt;del&gt;（什麼？Rails 不是語言嗎？）&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;作為一個信仰不夠忠貞的 Rails 信徒，自然會從廣義的 Web 開始講起。想到在行前會說明時，提到有個萬用便當遊戲&lt;sup id=&quot;fnref1&quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 可以用，自然就偷跑進度，直接拿便當圖來講故事啦。講故事的重點就是&lt;strong&gt;凡事回顧個兩三次&lt;/strong&gt;，並在不同時機再次連結。另外身為一個自學者，當然還是把肌肉記憶拿出來講了講，我還是覺得這挺有用的 XD&lt;/p&gt;

&lt;h2&gt;Day 2 - 跑跑進度啦&lt;/h2&gt;

&lt;p&gt;CodeAnywhere 有分享專案和 pair programming 的功能。先對專案點右鍵，並在跳出的選單選擇 Share、並輸入對方 Email 即可；而 Pair Programming 比較麻煩，每個檔案或是 Terminal 都要分享一次。如下圖所示，按下紙飛機按鈕，並輸入對方 Email：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/ky0B3yd.png&quot; alt=&quot;Imgur&quot;&gt;&lt;/p&gt;

&lt;p&gt;THE 紙飛機&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/8XTdMEr.png&quot; alt=&quot;Imgur&quot;&gt;&lt;/p&gt;

&lt;p&gt;透過 Pair Programming 的方式，即使是一次帶兩個人，也只要維護一份環境、一份專案，真是怠惰啊 😇&lt;/p&gt;

&lt;p&gt;第二天白天，我們這組跑了 Rails Girl 的兩篇教材，分別是 &lt;a href=&quot;http://railsgirls.tw/app&quot;&gt;Idea Scaffold&lt;/a&gt; 還有&lt;a href=&quot;http://railsgirls.tw/commenting&quot;&gt;留言功能&lt;/a&gt;，途中也不時對教練解釋的地方自我吐嘈了一番；下午就在各種&lt;del&gt;傳教&lt;/del&gt;閒聊之中度過了，比如 &lt;a href=&quot;https://medium.com/@juanitofatas/ruby-on-rails-%E5%9F%BA%E6%9C%AC%E4%B8%BB%E7%BE%A9-f4cde39292a4&quot;&gt;Rails 基本主義&lt;/a&gt;啦、&lt;a href=&quot;https://yukaii.tw/blog/2016/06/22/sublime-atom-vscode-comparison-mid-2016/&quot;&gt;編輯器之戰&lt;/a&gt;、&lt;a href=&quot;https://vinta.ws/blog/695&quot;&gt;鄙視鏈&lt;/a&gt;、GitHub 文化、&lt;a href=&quot;https://userstyles.org/&quot;&gt;Stylish&lt;/a&gt; 自訂網頁樣式表、&lt;a href=&quot;https://github.com/larsenwork/monoid&quot;&gt;Coding Font with Ligature support&lt;/a&gt;，還有 &lt;a href=&quot;https://djangogirls.org&quot;&gt;DjangoGirls&lt;/a&gt; 等等（在 Rails 的場子談 Django 是不是搞錯了什麼？）。畢竟這個圈子最好玩的就是聖戰以及用不完的攻城獅哏，體驗文化也是學習不可分割的一環啊！&lt;/p&gt;

&lt;h2&gt;After Party&lt;/h2&gt;

&lt;p&gt;據說 After Party 才是 Rails Girls 活動的精華......欸就這樣一行？&lt;/p&gt;

&lt;h2&gt;結語&lt;/h2&gt;

&lt;p&gt;Rails Girls 對於想接觸 Rails 或是網站入門的女性朋友來說，自然是個非常好的機會，手把手帶你寫程式還不用錢，實在是值回票價（等等！免費的活動哪來的票啊）；對身心疲憊、忙於工作的工程師教練們，也是個調劑身心的好時機，讓平常沉默的宅宅有了練蕭維的舞臺。最後感謝本活動的唯一贊助商&lt;a href=&quot;https://5xruby.tw&quot;&gt;五倍紅寶石&lt;/a&gt;，下次活動詳情就請繼續關注 &lt;a href=&quot;https://www.facebook.com/railsgirlstw/&quot;&gt;Rails Girls Taiwan&lt;/a&gt; 粉絲專頁啦！&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;參見 &lt;a href=&quot;http://blog.railsgirls.com/post/20405930015/bentobox-learn-the-language-of-technology&quot;&gt;Rails Girls 官方部落格&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 28 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://yukaii.tw/blog/2016/08/28/rails-girl-7/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2016/08/28/rails-girl-7/</guid>
        
        
      </item>
    
      <item>
        <title>部落格 GitHub 新版型主題</title>
        <description>&lt;p&gt;過程可以看 &lt;a href=&quot;https://github.com/Yukaii/Blog/pull/1&quot;&gt;PR#1&lt;/a&gt;，大致上是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;引入 &lt;a href=&quot;https://primercss.io&quot;&gt;primer css&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;清掉原本沒用到的 css&lt;/li&gt;
&lt;li&gt;Post Layout 加上 &lt;code&gt;markdown-body&lt;/code&gt; 的 class（&lt;a href=&quot;https://github.com/Yukaii/Blog/commit/31360b&quot;&gt;31360b&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;從 GitHub 上面拿 css 來用 XD&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;不囉嗦，直接上圖了。&lt;/p&gt;

&lt;h2&gt;Before&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/3rBAve0.png&quot; alt=&quot;before-1&quot;&gt;
&lt;img src=&quot;http://i.imgur.com/bXb19SE.png&quot; alt=&quot;before-2&quot;&gt;&lt;/p&gt;

&lt;h2&gt;After&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/McEpFdB.png&quot; alt=&quot;after-1&quot;&gt;
&lt;img src=&quot;http://i.imgur.com/PqH6sup.png&quot; alt=&quot;after-2&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Misc&lt;/h2&gt;

&lt;p&gt;另外附上最近弄的 VSCode Markdown Preview Theme。我習慣用暗色的 syntax highlight theme，但是 VSCode 的 Markdown Preview 會根據目前使用的 Theme，來使用亮色或暗色，所以我寫了一些覆蓋的 css，讓不論選亮色或是暗色主題都能使用明亮的 Markdown 預覽主題。與 &lt;a href=&quot;https://gist.github.com/BigstickCarpet/&quot;&gt;BigstickCarpet&lt;/a&gt; 的 GFM Theme 一起使用效果更佳 😁&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Yukaii/vscode-markdown-github-css&quot;&gt;vscode-markdown-github-css&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/hHbhwHJ.png&quot; alt=&quot;md1&quot;&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://yukaii.tw/blog/2016/08/22/blog-new-github-theme/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2016/08/22/blog-new-github-theme/</guid>
        
        
      </item>
    
      <item>
        <title>從 1Password 搬家到 pass</title>
        <description>&lt;h2&gt;Why?&lt;/h2&gt;

&lt;p&gt;pass 照&lt;a href=&quot;https://www.passwordstore.org/&quot;&gt;官網&lt;/a&gt;的說法，是一套 「標準 unix 密碼管理」（the standard unix password manager），開源簡單好用。雖然 1Password 我是用 Dropbox 同步，應該還算安全，不過多個開源選擇也不錯。&lt;/p&gt;

&lt;p&gt;pass 也有一些社群版套件，引用一下官網：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The community has even produced a &lt;a href=&quot;http://qtpass.org/&quot;&gt;cross-platform GUI client&lt;/a&gt;, an &lt;a href=&quot;https://github.com/zeapo/Android-Password-Store&quot;&gt;Android app&lt;/a&gt;, an &lt;a href=&quot;https://github.com/davidjb/pass-ios#readme&quot;&gt;iOS app&lt;/a&gt;, a &lt;a href=&quot;https://github.com/jvenant/passff#readme&quot;&gt;Firefox plugin&lt;/a&gt;, a &lt;a href=&quot;https://github.com/mbos/Pass4Win&quot;&gt;Windows client&lt;/a&gt;, a pretty &lt;a href=&quot;https://github.com/TheLastProject/Pext&quot;&gt;Python QML app&lt;/a&gt;, a nice &lt;a href=&quot;https://github.com/cortex/gopass&quot;&gt;Go GUI app&lt;/a&gt;,  an &lt;a href=&quot;https://github.com/Kwpolska/upass&quot;&gt;interactive console UI&lt;/a&gt;, Alfred integration &lt;a href=&quot;https://github.com/CGenie/alfred-pass&quot;&gt;(1)&lt;/a&gt; &lt;a href=&quot;https://github.com/MatthewWest/pass-alfred&quot;&gt;(2)&lt;/a&gt; &lt;a href=&quot;https://github.com/johanthoren/simple-pass-alfred&quot;&gt;(3)&lt;/a&gt;, a &lt;a href=&quot;https://git.zx2c4.com/password-store/tree/contrib/dmenu&quot;&gt;dmenu script&lt;/a&gt;, &lt;a href=&quot;https://git.zx2c4.com/password-store/tree/contrib/pass.applescript&quot;&gt;OS X integration&lt;/a&gt;, &lt;a href=&quot;https://github.com/languitar/pass-git-helper&quot;&gt;git credential integration&lt;/a&gt;, and even an &lt;a href=&quot;https://git.zx2c4.com/password-store/tree/contrib/emacs&quot;&gt;emacs package&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不過 iOS App 版要 jailbreak 之後才能使用呀 😭，不過身為一個還算熟悉 CLI 的使用者，這些當然都不是問題啊 😁。&lt;/p&gt;

&lt;h2&gt;安裝 pass&lt;/h2&gt;

&lt;p&gt;OS X 安裝十分容易：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;brew install pass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就好了。他也提供一些 shell completion 可以使用，&lt;code&gt;fish&lt;/code&gt; 需要在 &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; 裡加上：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; /usr/local/share/fish/vendor_completions.d/pass.fish
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;設定 pass&lt;/h2&gt;

&lt;p&gt;完成之後我們要看一下有沒有 gpg 金鑰，如果沒有的話要新增個&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gpg --gen-key &lt;span class=&quot;c&quot;&gt;# 產生 gpg key&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;記得輸入的 key phrase 呀，之後會拿來解鎖的。用 &lt;code&gt;gpg --list-keys&lt;/code&gt; 查看剛剛產生的 key，類似下面這樣：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/Users/username/.gnupg/pubring.gpg
-------------------------------
pub   2048R/A534B400 2016-08-18
uid                  My Name &amp;lt;your_email@gmail.com&amp;gt;
sub   2048R/E1001945 2016-08-18
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;pubic id 就是 &lt;code&gt;A534B400&lt;/code&gt;，拿這組 id 來初始化 pass&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pass init A534B400
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完成！之後就可以用 pass 指令管理密碼了，可以下一些測試的指令試試，比如 insert 一組 foo 的密碼：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pass insert foo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後顯示 foo 的密碼&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pass show foo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;由 1Password 匯入&lt;/h2&gt;

&lt;p&gt;官網上就寫上匯入 1password 的 &lt;a href=&quot;https://git.zx2c4.com/password-store/tree/contrib/importers/1password2pass.rb&quot;&gt;ruby script&lt;/a&gt; 😍 ，直接使用就行了。在 1Password 匯出 txt 時，記得勾選 &lt;code&gt;Include Column Labels&lt;/code&gt;，如下圖：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/YsoUQcv.png&quot; alt=&quot;1password-export-option&quot;&gt;&lt;/p&gt;

&lt;p&gt;把匯出的檔案和匯入腳本準備好，跑一下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;ruby 1password2pass.rb /path/to/1password_exported.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;基礎使用&lt;/h2&gt;

&lt;p&gt;pass 的管理可以說是相當自由，通通放在 &lt;code&gt;~/.password-store&lt;/code&gt; 目錄，底下可以建立任意的目錄分類，或是乾脆不分 XD&lt;/p&gt;

&lt;p&gt;一些基本指令：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pass show PROFILE &lt;span class=&quot;c&quot;&gt;# 印出 PROFILE 的密碼&lt;/span&gt;
pass -c PROFILE &lt;span class=&quot;c&quot;&gt;# 複製 PROFILE 的密碼到剪貼簿&lt;/span&gt;
pass ls &lt;span class=&quot;c&quot;&gt;# 列出所有密碼設定檔&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我做了以下 alias，方便快速密碼搜尋：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;passgrep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pass ls | grep -i&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就可以用 &lt;code&gt;passgrep&lt;/code&gt; 來搜尋現有設定檔了。&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://yukaii.tw/blog/2016/08/19/migrate-1password-to-pass/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2016/08/19/migrate-1password-to-pass/</guid>
        
        
      </item>
    
      <item>
        <title>使用 Chrome 在快速鍵切換至網址列後，再用快速鍵切換回來</title>
        <description>&lt;h2&gt;啥？&lt;/h2&gt;

&lt;p&gt;習慣於鍵盤操作 Chrome，比如 &lt;a href=&quot;https://github.com/philc/vimium/&quot;&gt;Vimium&lt;/a&gt; 或是 &lt;a href=&quot;https://github.com/1995eaton/chromium-vim&quot;&gt;cvim&lt;/a&gt; 等擴充套件，在需要跳轉網址列進行搜尋時，都會很自然的使用 Chrome 的內建快速鍵：&lt;code&gt;CMD + L&lt;/code&gt;（在 Windows 是 F6）來操作。&lt;/p&gt;

&lt;p&gt;那回來呢？我想要在切回網頁本身，再次用熟悉的 VIM key binding 來衝浪。&lt;/p&gt;

&lt;p&gt;很遺憾的，Chrome 本身並沒有提供此功能，而擴充套件的作用域也不包含網址列，在經過 Google 之後終於找到一個 Hacky 的解法。&lt;/p&gt;

&lt;h2&gt;建立自訂搜尋引擎&lt;/h2&gt;

&lt;p&gt;在設定找「搜尋引擎」：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/qmkSYvX.png&quot; alt=&quot;search-engine&quot;&gt;&lt;/p&gt;

&lt;p&gt;在最底下新增一個搜尋引擎，三個欄位分別填入&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Refocus &lt;span class=&quot;c&quot;&gt;# 自訂搜尋引擎名稱&lt;/span&gt;
i &lt;span class=&quot;c&quot;&gt;# 要綁定的關鍵字，越短越好&lt;/span&gt;
javascript:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如下圖：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/J5d9Kec.png&quot; alt=&quot;add-search-engine&quot;&gt;&lt;/p&gt;

&lt;p&gt;接下來在切換到網址列之後，主要輸入綁定的關鍵字，再按下 enter，就能切換回網頁囉：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/tgxysRe.png&quot; alt=&quot;address-bar&quot;&gt;&lt;/p&gt;

&lt;p&gt;via &lt;a href=&quot;http://superuser.com/questions/324266/google-chrome-mac-set-keyboard-focus-from-address-bar-back-to-page/324267#324267&quot;&gt;Google Chrome (Mac) set keyboard focus from address bar back to page - Super User&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 12 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://yukaii.tw/blog/2016/08/12/refocus-from-chrome-address-bar/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2016/08/12/refocus-from-chrome-address-bar/</guid>
        
        
      </item>
    
  </channel>
</rss>
