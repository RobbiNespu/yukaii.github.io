<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daily Oops!</title>
    <description>Yukai's blog. Web tech, apps, photos, and notes.
</description>
    <link>http://yukaii.tw/</link>
    <atom:link href="http://yukaii.tw/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 28 Jun 2017 21:25:20 +0800</pubDate>
    <lastBuildDate>Wed, 28 Jun 2017 21:25:20 +0800</lastBuildDate>
    <generator>Jekyll v3.5.0</generator>
    
      <item>
        <title>Windows Unix-Like 環境設定踩坑紀錄</title>
        <description>&lt;h2&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;Hyper-V + Ubuntu Server + Samba + WSL ssh + cmder&lt;/p&gt;

&lt;h2&gt;緣起&lt;/h2&gt;

&lt;p&gt;自從印度人上臺之後，感覺微軟真的變了，從邪惡帝國主義（？）變成開源大法好，可惜基於歷史因素，社群圈講到微軟多半是酸居多，唉。至少從我這個 JavaScript 開發者兼 VSCode 愛好者來看，微軟真的進步超多了，害我都想拋棄 macOS、買台 Surface 跳槽 Windows 10 試試了。&lt;/p&gt;

&lt;p&gt;本文就是在購買 Surface 前的開發前置準備。如果買了 Surface 之後，整個開發 workflow 都要砍掉重練那也是滿累的 QQ。剛好最近回老家，就拿桌機的 Windows 10 來開刀吧！(至於我怎麼把 1G 的可用硬碟空間拉到 60G 那又是另一個故事了)&lt;/p&gt;

&lt;h2&gt;WSL - Windows Subsystem for Linux (Bash on Windows)&lt;/h2&gt;

&lt;p&gt;在 Creators Update 之後，WSL 的能用度更高了，來試驗了一下 node.js 開發體驗揪竟是如何。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;存在 ulimit file descriptor 2048 限制 &lt;a href=&quot;https://github.com/Microsoft/BashOnWindows/issues/1688&quot;&gt;BashOnWindows#1688&lt;/a&gt;、&lt;a href=&quot;https://github.com/Microsoft/BashOnWindows/issues/1576&quot;&gt;BashOnWindows#1576&lt;/a&gt; 等。比如用 &lt;code&gt;copy-webpack-plugin&lt;/code&gt; 就會噴錯，不過也有 &lt;code&gt;graceful-fs&lt;/code&gt; 能解&lt;/li&gt;
&lt;li&gt;檔案系統還無法完美互通。官方文件是這樣說的：&lt;strong&gt;DO NOT,&lt;/strong&gt; &lt;strong&gt;&lt;strong&gt;under ANY circumstances&lt;/strong&gt;&lt;/strong&gt; &lt;strong&gt;, create and/or modify Linux files using Windows apps, tools, scripts, consoles, etc.&lt;/strong&gt;。我遇到因為在 WSL 的 git 與 windows 的 git 交互使用，造成檔案遺失無法存取的狀況&lt;/li&gt;
&lt;li&gt;效能比想像中差，裝套件花的時間比想像中久(感覺上啦，沒真的測時間，Fall Creators Update 應該還會再提升)&lt;/li&gt;
&lt;li&gt;不太適合新手 w&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;雖然開發程式跑得起來，但我只能用文字介面的 git？我才不要咧 XD 於是電梯向下，繼續找下一套替代方案。&lt;/p&gt;

&lt;p&gt;雖然遇到一些雷，可是 ssh、vim、tmux mosh 一系列工具在 WSL 裡面已經沒啥大問題了(好歹我沒遇到)，作為「原生 ssh 客戶端」算非常夠用啦 w。&lt;/p&gt;

&lt;h2&gt;Vagrant&lt;/h2&gt;

&lt;p&gt;Vagrant 可以說是虛擬機開發懶人方案，用 ruby 寫設定檔，幫你把資料夾、網路共享、port forwarding 一次搞定。&lt;/p&gt;

&lt;p&gt;Vagrant 預設是用 virtualbox，也有 vmware 或 hyper-v 可以選用。就要另外找壓好的 vagrant box。因為 Hyper-V 似乎比 VirtualBox 的效能還要好，所以特別找了&lt;a href=&quot;https://app.vagrantup.com/jjworren/boxes/xenial64&quot;&gt;基於 hyper-v 的 image&lt;/a&gt; 來用，無奈就是跑不起來。看了一下命令列的輸出，發現他的目錄共享也是透過 samba 來弄。那就來自己搞吧！&lt;/p&gt;

&lt;h2&gt;Hyper-V&lt;/h2&gt;

&lt;p&gt;Windows 內建的虛擬化方案，可以隨開關機自動啟動停止，完全無縫整合進 Windows 裡面！不過還不知道對續航力有啥影響，請期待 Surface 開箱文(誤)&lt;/p&gt;

&lt;p&gt;我直接裝上了 ubuntu server 16.04 版，反正桌面環境就用 Windows 10 的，UWP 大好。先建立一個虛擬交換器，之後日常照著裝完就好了。&lt;/p&gt;

&lt;p&gt;參考文件：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows-server/virtualization/hyper-v/best-practices-for-running-linux-on-hyper-v&quot;&gt;Best Practices for running Linux on Hyper-V&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows-server/virtualization/hyper-v/supported-ubuntu-virtual-machines-on-hyper-v&quot;&gt;Supported Ubuntu virtual machines on Hyper-V&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;設定 Samba 讓專案檔案共享&lt;/h3&gt;

&lt;p&gt;弄到這的時候一直在想，到底要 &lt;strong&gt;Windows 開共享資料夾讓 Ubuntu 掛載&lt;/strong&gt; 還是 &lt;strong&gt;Ubuntu 開共享讓 Windows 掛載&lt;/strong&gt;呢？結論：&lt;strong&gt;Ubuntu 共享讓 Windows 連線&lt;/strong&gt;。以 Node.JS 開發環境來說，&lt;code&gt;node_modules&lt;/code&gt; 安裝的時候就要處理一堆 symlink 了，而 NTFS 不支援啊，所以前者一定爆的...（會這麼說是因為我在這卡很久 orz）&lt;/p&gt;

&lt;p&gt;(更新一下，其實 &lt;a href=&quot;https://blogs.windows.com/buildingapps/2016/12/02/symlinks-windows-10/#oFj8QWsqO3o1e18O.97&quot;&gt;Windows 是支援 Symlink&lt;/a&gt; 的，不過 linux 上的 samba client 不支援，還是掰呵呵)&lt;/p&gt;

&lt;p&gt;設定過程參考了以下資料：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.arthurtoday.com/2015/04/ubuntu-server-share-folder-samba.html&quot;&gt;Ubuntu Server 設定 Samba 分享檔案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://flykof.pixnet.net/blog/post/23028119&quot;&gt;Ubuntu下samba安裝設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wsgzao.github.io/post/samba/&quot;&gt;使用Samba实现Linux与Windows文件共享实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;還有一點是要把建立的 samba user 加到目前使用者的 Group 底下，要不然每次都要 &lt;code&gt;chown&lt;/code&gt; 很麻煩：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo usermod -G GROUP_NAME smbuser
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/SJYhYwJ.png&quot; alt=&quot;drive&quot;&gt;&lt;/p&gt;

&lt;p&gt;自此專案資料夾便能無痛掛載到 Windows 內，由 Windows 內的 IDE 或編輯器存取啦！&lt;/p&gt;

&lt;h2&gt;cmder&lt;/h2&gt;

&lt;p&gt;說到 Windows 平台下好用的 Terminal 大家都會推 cmder，就是 ConEMU 加上 Git for Windows 一整套幫你裝好了，直接上截圖。字體是我愛用的 &lt;a href=&quot;https://github.com/madmalik/mononoki&quot;&gt;mononoki&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/VHM4USs.png&quot; alt=&quot;cmder&quot;&gt;&lt;/p&gt;

&lt;p&gt;可惜的是還沒有滑鼠支援，大家可以到 &lt;a href=&quot;https://github.com/Maximus5/ConEmu/issues/1114&quot;&gt;ConEmu#1114&lt;/a&gt; 追蹤。&lt;/p&gt;

&lt;h2&gt;Git&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;filemode 要設為 false，不然權限會顯示成 diff&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/6448242/git-push-error-insufficient-permission-for-adding-an-object-to-repository-datab/6448326#6448326&quot;&gt;修正 git over samba 的權限問題&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;為何不用 Docker (moby)？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/docker-for-windows/install/#download-docker-for-windows&quot;&gt;Docker for Windows 背後也是 Hyper-V 啊&lt;/a&gt; XD&lt;/p&gt;

&lt;p&gt;看論壇上的討論(&lt;a href=&quot;https://stackoverflow.com/questions/22842920/how-to-edit-code-in-a-docker-container-in-development&quot;&gt;stackoverflow&lt;/a&gt;、&lt;a href=&quot;https://forums.docker.com/t/best-practices-for-getting-code-into-a-container-git-clone-vs-copy-vs-data-container/4077&quot;&gt;forum&lt;/a&gt;)大都搭配 data container/volumn mounting/shared drive 的方式來弄，不過你也知道 NTFS 一扯到 symlink &lt;a href=&quot;https://github.com/docker/for-win/issues/109&quot;&gt;目前還是沒戲兒&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;另一種方法是用 &lt;a href=&quot;http://blog.cloud66.com/how-to-get-code-into-a-docker-container/&quot;&gt;COPY&lt;/a&gt; 來弄，不過跟 Windows 相容性如何，那畫面太美我不敢想 :joy: 所以囉&lt;/p&gt;

&lt;h2&gt;結論&lt;/h2&gt;

&lt;p&gt;說實話有點高估 WSL 的能耐了 XD 如果在輕量級開發(多輕量？我也不知道)之下，體驗說不定真的很好。&lt;/p&gt;

&lt;p&gt;剩下來的設定檔全面移轉、AHK Scripting、各式輔助軟體就等 Surface 開箱之後再說吧 XDD&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/G09U4RQ.png&quot; alt=&quot;VSCode&quot;&gt;&lt;/p&gt;

&lt;p&gt;本篇文章就是在 Windows 下的 VSCode 編輯 Markdown、配上 Hyper-V 下的 Ubuntu 使用 Jekyll 生成的。讚讚 :heart:&lt;/p&gt;

&lt;p&gt;主題是 &lt;a href=&quot;https://github.com/karyfoundation/kf-theme-vscode&quot;&gt;Kary Light&lt;/a&gt; 配上 &lt;a href=&quot;https://be5invis.github.io/Iosevka/inziu.html&quot;&gt;Inziu Iosevka&lt;/a&gt;，Windows 跟這套字體真是絕配！&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://yukaii.tw/blog/2017/06/28/windows-unix-style-development-guide-nodejs-ruby/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2017/06/28/windows-unix-style-development-guide-nodejs-ruby/</guid>
        
        
      </item>
    
      <item>
        <title>使用 puma 和 nginx 部屬 Redmine（加上從 MySQL 搬到 PostgreSQL）</title>
        <description>&lt;p&gt;前陣子看了幾篇 Linode 安利文，每月五鎂的機器好像就 Linode CP 值最高惹，管理界面雖然看起來陽春，使用起來倒挺有效率的。這幾天就把擺在 Vultr 上的自用服務 (Redmine，幾個 crontab 腳本) 搬到了 Linode 上。&lt;/p&gt;

&lt;p&gt;除了單純的搬家外，部屬的 Redmine 也做了一些調整：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3.2 到 3.3&lt;/li&gt;
&lt;li&gt;資料庫由 MySQL 轉換到 PostgreSQL&lt;/li&gt;
&lt;li&gt;Application server 由 passenger 換成 puma&lt;/li&gt;
&lt;li&gt;版控由官方 svn 換成 git mirror，方便操作 XD&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;總之本篇除了是我的搬家筆記，還可以視為&lt;strong&gt;自架 Redmine 指南&lt;/strong&gt;（大概啦）。&lt;/p&gt;

&lt;h2&gt;設定新伺服器&lt;/h2&gt;

&lt;p&gt;直接在 Linode 東京開了台 Ubuntu 的 Instance，然後 ssh 打密碼連進去。&lt;/p&gt;

&lt;h3&gt;解決 apt-get update 卡住問題&lt;/h3&gt;

&lt;p&gt;請參考 &lt;a href=&quot;https://askubuntu.com/a/787491&quot;&gt;apt-get update stuck: Connecting to security.ubuntu.com&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;裝 Dependency&lt;/h3&gt;

&lt;p&gt;首先當然就把系統的相依套件裝一裝，包含 tmux、postgres 資料庫等等。滿建議學習一下 tmux 的。可以開兩個 tab，一個 root 權限，一個一般權限，方便許多，不用一直切 su。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get upgrade &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y git build-essential tmux postgresql libpq-dev &lt;span class=&quot;c&quot;&gt;# database&lt;/span&gt;
apt-get install -y libssl-dev libreadline-dev zlib1g-dev &lt;span class=&quot;c&quot;&gt;# ruby dependency&lt;/span&gt;
apt-get install -y imagemagick libmagickcore-dev libmagickwand-dev &lt;span class=&quot;c&quot;&gt;# redmine dependency&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;建立 deploy 用的使用者&lt;/h3&gt;

&lt;p&gt;我不希望直接用 root 帳號跑起 Redmine 服務。總之就是安全性疑慮啦 XD。直接打 &lt;code&gt;adduser&lt;/code&gt; 走完過程：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;adduser deploy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;安裝 Redmine&lt;/h3&gt;

&lt;h4&gt;下載原始碼&lt;/h4&gt;

&lt;p&gt;切到 &lt;code&gt;deploy&lt;/code&gt; 帳號，把 redmine clone 下來，並把設定檔弄好：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;su deploy
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~ &lt;span class=&quot;c&quot;&gt;# 切到家目錄&lt;/span&gt;
git clone https://github.com/redmine/redmine

&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;redmine
git checkout -b 3.3-stable origin/3.3-stable

cp config/database.yml.example cp config/database.yml
cp config/configuration.yml.example cp config/configuration.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;建立 Ruby 環境&lt;/h4&gt;

&lt;p&gt;使用 &lt;a href=&quot;https://github.com/rbenv/rbenv&quot;&gt;rbenv&lt;/a&gt; 裝 ruby，直接照著步驟跑：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone https://github.com/rbenv/rbenv.git ~/.rbenv
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/.rbenv &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; src/configure &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make -C src
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;'&lt;/span&gt; &amp;gt;&amp;gt; ~/.bash_profile &lt;span class=&quot;c&quot;&gt;# linode 上是 .bashrc&lt;/span&gt;
~/.rbenv/bin/rbenv init &lt;span class=&quot;c&quot;&gt;# 貼上輸出到 .bash_profile 或 .bashrc&lt;/span&gt;
git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build &lt;span class=&quot;c&quot;&gt;# 裝 ruby build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;裝 ruby：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rbenv install 2.3.4
rbenv global 2.3.4
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'gem: --no-ri --no-rdoc'&lt;/span&gt; &amp;gt;&amp;gt; ~/.gemrc
gem install bundler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;設定資料庫&lt;/h4&gt;

&lt;p&gt;用好棒棒的 &lt;a href=&quot;https://github.com/dbcli/pgcli&quot;&gt;&lt;code&gt;pgcli&lt;/code&gt;&lt;/a&gt; 與本機 postgres 建立連線。上面 APT 套件裝完後應該就會自己跑起來了。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;apt-get install pgcli
sudo -i -u postgres
pgcli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;進去以後，建立使用者和資料庫：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redmine&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PASSWORD&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'PASSWORD'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redmine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIVILEGES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redmine&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redmine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;測試連線(Optional)&lt;/h5&gt;

&lt;p&gt;以防密碼打錯這種奇妙事件發生，我們可以測試一下連線。打開 &lt;code&gt;/etc/postgresql/9.5/main/pg_hba.conf&lt;/code&gt;，找到下面加入這行：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;local   all             redmine                                 md5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這行開啟本地端的帳密授權登入。然後用 &lt;code&gt;psql&lt;/code&gt; 連線本機測試：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;psql -U redmine -d redmine -W
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;成功連進去就 Ok 啦。&lt;/p&gt;

&lt;h4&gt;設定 Redmine 資料庫&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;編輯 &lt;code&gt;config/database.yml&lt;/code&gt; 填入資料庫帳密，把 &lt;code&gt;mysql&lt;/code&gt; 相關的都註解掉(development 等等)&lt;/li&gt;
&lt;li&gt;然後安裝 redmine 的 gem dependency
&lt;code&gt;bash
bundle install --without development test
&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5&gt;Migrate from old redmine (Optinoal)&lt;/h5&gt;

&lt;p&gt;複製以下檔案：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config/initializers/secret_token.rb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config/database.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config/configuration.yml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;從 MySQL 搬家到 Postgres 的部分，因為都是同一個 App，Redmine 版本也只是小升沒有大型 migration，我直接利用&lt;a href=&quot;https://github.com/yamldb/yaml_db&quot;&gt;&lt;code&gt;yaml_db&lt;/code&gt;&lt;/a&gt; 套件，把資料庫 dump 出來成 yaml，然後在 load 就行了 :heart: 可以參考 &lt;a href=&quot;https://github.com/yamldb/yaml_db&quot;&gt;&lt;code&gt;yaml_db&lt;/code&gt;&lt;/a&gt; 套件 GitHub 說明。&lt;/p&gt;

&lt;p&gt;先跑 &lt;code&gt;RAILS_ENV=production bundle exec rake db:setup&lt;/code&gt; 建立資料庫，然後在 &lt;code&gt;bundle exec rake db:data:load&lt;/code&gt; 把檔案載入進來。&lt;/p&gt;

&lt;h2&gt;設定 Puma&lt;/h2&gt;

&lt;p&gt;在 Gemfile 加上 &lt;code&gt;gem &amp;#39;puma&amp;#39;&lt;/code&gt; 一行，然後跑 &lt;code&gt;bundle install --without development test&lt;/code&gt; 安裝。再來編輯 &lt;code&gt;config/puma.rb&lt;/code&gt; 貼上以下內容：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env puma&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;application_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/home/deploy/redmine'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application_path&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'production'&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# daemonize true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pidfile&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application_path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/tmp/pids/redmine.pid&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;state_path&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application_path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/tmp/pids/redmine.state&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stdout_redirect&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application_path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/log/redmine.stdout.log&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application_path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/log/redmine.stderr.log&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;unix://&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application_path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/tmp/sockets/redmine.sock&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;記得建立 &lt;code&gt;pids&lt;/code&gt; 和 &lt;code&gt;sockets&lt;/code&gt; 資料夾：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/redmine
mkdir tmp/sockets tmp/pids
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以用以下指令試跑 Server：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;RAILS_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;production bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;puma -C config/puma.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;設定 systemctl 自啟動&lt;/h2&gt;

&lt;p&gt;用 root 權限編輯 &lt;code&gt;/etc/systemd/system/redmine.service&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Ini&quot; data-lang=&quot;Ini&quot;&gt;[Unit]
Description=Rails-Puma Webserver

[Service]
Type=simple
User=deploy
WorkingDirectory=/home/deploy/redmine
ExecStart=/bin/bash -lc 'bundle exec puma -C config/puma.rb'
TimeoutSec=15
Restart=always

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;跑起來：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;systemd daemon-reload &lt;span class=&quot;c&quot;&gt;# 重新載入設定檔&lt;/span&gt;
systemd &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;redmine.service &lt;span class=&quot;c&quot;&gt;# 設為開機啟動&lt;/span&gt;
systemd start redmine.service &lt;span class=&quot;c&quot;&gt;# 啟動&lt;/span&gt;
systemd status redmine.service &lt;span class=&quot;c&quot;&gt;# 看狀態&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;把 nginx 跟 puma socket server 接起來&lt;/h2&gt;

&lt;p&gt;編輯 &lt;code&gt;/etc/nginx/sites-available/redmine&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nginx&quot; data-lang=&quot;nginx&quot;&gt;&lt;span class=&quot;k&quot;&gt;upstream&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;unix:/home/deploy/redmine/tmp/sockets/redmine.sock&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fail_timeout=0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;[::]:80&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kn&quot;&gt;server_name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/home/deploy/redmine/public&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;try_files&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;/index.html&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@app&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kn&quot;&gt;proxy_pass&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kn&quot;&gt;proxy_set_header&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;X-Forwarded-For&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kn&quot;&gt;proxy_set_header&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Host&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$http_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kn&quot;&gt;proxy_redirect&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kn&quot;&gt;error_page&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;502&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;503&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;504&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/500.html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;client_max_body_size&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;keepalive_timeout&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;記得 soft link 回 &lt;code&gt;/etc/nginx/sites-enabled/&lt;/code&gt;底下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /etc/nginx/sites-enabled
ln -s ../sites-available/redmine .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重啟 &lt;code&gt;nginx&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;service nginx restart
service nginx status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打開瀏覽器連 IP 應該就能看到辣！&lt;/p&gt;

&lt;h2&gt;目前的 Plugin 列表&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;www.redmine.org/plugins/redmine_emojibutton&quot;&gt;redmine_emojibutton&lt;/a&gt;: Emoji 萬歲！&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eichisanden/redmine_markdown_task_list&quot;&gt;redmine_markdown_task_list&lt;/a&gt;: Checklist&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.redmine.org/plugins/redmine-mentions&quot;&gt;redmine_mentions&lt;/a&gt;: Tag 人寄 email&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/velenux/6883dc221a7d2eae7dcb&quot;&gt;https://gist.github.com/velenux/6883dc221a7d2eae7dcb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/jbradach/6ee5842e5e2543d59adb&quot;&gt;https://gist.github.com/jbradach/6ee5842e5e2543d59adb&lt;/a&gt; for config/puma.rb&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-deploy-a-rails-app-with-puma-and-nginx-on-ubuntu-14-04&quot;&gt;https://www.digitalocean.com/community/tutorials/how-to-deploy-a-rails-app-with-puma-and-nginx-on-ubuntu-14-04&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/puma/puma/blob/master/docs/systemd.md&quot;&gt;https://github.com/puma/puma/blob/master/docs/systemd.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/puma/puma/blob/master/docs/nginx.md&quot;&gt;https://github.com/puma/puma/blob/master/docs/nginx.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yamldb/yaml_db&quot;&gt;https://github.com/yamldb/yaml_db&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 04 May 2017 00:00:00 +0800</pubDate>
        <link>http://yukaii.tw/blog/2017/05/04/deploy-redmine-with-puma-nginx-migration-from-mysql-to-postgresql/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2017/05/04/deploy-redmine-with-puma-nginx-migration-from-mysql-to-postgresql/</guid>
        
        
      </item>
    
      <item>
        <title>git cherry-pick 小技巧</title>
        <description>&lt;p&gt;簡單記錄下今天用到的小技巧。&lt;/p&gt;

&lt;p&gt;有的時候會加入多個 git remote，比如說 upstream/origin 或 public/private 等等，針對不同釋出版本用版控劃分，但又想利用 git 維持兩者間的部分差異。這時候就可以用 cherry-pick 指令批次套用 commit 到目前的程式碼基礎上。&lt;/p&gt;

&lt;p&gt;使用版本控制系統的好處，就是把每次「修改」都視為可以任意放出收回的，呃，&lt;strong&gt;招式&lt;/strong&gt;。這就是為啥 commit 粒度切的越細越好啦。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git cherry-pick COMMIT_SHA1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或是你想要 cherry-pick 多個 commit 也行：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git cherry-pick START_SHA1^..END_SHA1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;多加了一個 &lt;code&gt;^&lt;/code&gt; 是表示開始 SHA1 的前一個 commit。&lt;/p&gt;

&lt;p&gt;假如噴出了錯誤，那就手動解決完 merge conflicts，再用 &lt;code&gt;git cherry-pick --continue&lt;/code&gt; 繼續套用剩餘的 commit。&lt;/p&gt;

&lt;p&gt;或是失敗想回到還沒 &lt;code&gt;cherry-pick&lt;/code&gt; 的狀態，用 &lt;code&gt;git cherry-pick --abort&lt;/code&gt; 就好。&lt;/p&gt;

&lt;p&gt;大 GUY 4 這樣&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://yukaii.tw/blog/2017/04/24/git-cherry-pick/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2017/04/24/git-cherry-pick/</guid>
        
        
      </item>
    
      <item>
        <title>部落格主題微調 - PrimerCSS 更新</title>
        <description>&lt;h2&gt;沒哏的時候就來換換主題&lt;/h2&gt;

&lt;p&gt;沒哏也要想哏來寫，動物朋友也準備迎來最後一話了，不論要不要崩潰，動畫還是要看，生活還是要過，碼字的繼續碼，該睡時還是得去睡。&lt;/p&gt;

&lt;p&gt;最近最大的男性交友社群 GitHub 改了改樣式。說是最近，其實也一個月了。先是 Navbar 調成黑色，再來連按鈕顏色、超連結都改了。剛改變的那幾天為避免眼睛不適(?)，還特別找了 &lt;a href=&quot;https://github.com/DennisSnijder/MakeGithubGreatAgain&quot;&gt;MakeGithubGreatAgain&lt;/a&gt;、&lt;a href=&quot;https://github.com/ricordisamoa/MakeGithubPaleAgain&quot;&gt;MakeGithubPaleAgain&lt;/a&gt;、&lt;a href=&quot;https://userstyles.org/&quot;&gt;各式第三方樣式表&lt;/a&gt;來自救，沒想到過沒多久眼睛就自己適應了，該不會 GitHub 又偷偷調整了吧（喂）&lt;/p&gt;

&lt;p&gt;本站就是利用 GitHub 的 PrimerCSS 打造，依照慣例，每次換主題都應該發一篇文，截圖炫耀兼記錄一下。&lt;/p&gt;

&lt;h3&gt;Before&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_SWzvhF7-wB1dzmRRO0CRdbi2jQyqTEgbH294XcTdQr3OnZgmzKxg6wYbvnNAjAJwQmoua_6g18W_RXk1OdJVtu_Ot9k5eav4qsUsvPugPGYPOttmaC7uQ8VZD6SU2etaZlCq0rvja86XHH_buL8trOSs7SLXnvI1MNd8Vt3C7fzJ42L4QhGmXyFWaOguqf-9manBJBR4aVEcJCW5kUiCW7T8gTBa7QHgccckSWV_LM-vjEMJhb5GGf16mkYyO0kJanYFu20jK3PNHMauvlHHTxBs6nLIgyMlo-VIeAr2Lgyy2aJiPdc8HNHraBmFN3krTTeJMw2VFUfPfdp2UMkjJUQ3N43KEphpeOCIVCpXevYlVfdayh4x8__r3D8Sy9gqAjHX_J8Ny5TC4LwP54BoL8r4zj0HhOAQUbLDwWyjvGwuWzMXBz6uZyplFIH39HcSzptclkESQLWkwhUkhcQQX-1MHGBIZKpYED7X_-x-vlqsxRbM28RxzOKWuS7zsrGke_EDAXjdy88Z74efyWu79WnepRyTk519tcRcG7I-3qSgj9AIRr6mcX-3XS3pZ-LjAh346eH77al5UpKi3AYy3aKdyzUnmFVQMDiaiPu_-mcG-xF34z2_g=w867-h765-no&quot; alt=&quot;before&quot;&gt;&lt;/p&gt;

&lt;h3&gt;After&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/YazoIwe38_G40-g1sQNpktPrEUtbQxtGTBQqpyhZ-nQ5CzBoeQJzrgKGDLzjpQ206WYPFKywtzgRIpAjCj2HhG-o1fqYNuGOvYorJlRKVw_lzjUKFRxCXXcBQUhXyf601yWICtljNeiT2hK4DjPikb_3McotGE_rmaYNJHVAecB70o4Cwjea50Qux8uKYBcTmtbs5I0-_247C-MstkrWPRRb-8k0kBnGymkmE5OQufFhh8cnOZHYj60FT3Y4ZQOmGwl0AojSOAvr7tjo_ihi-YeFmYu2zJFvHB1UWFdOklTfmGBt-E0F7O2tT8ccE9H0eB1ij6jmGbkfgguOmVqnFhJN52SuK2las75hYX8LeWS32z0wzr6GtaNaxElMQ-gH0-Gt8Qe5JSEr3G-q0Yiu8qYXd9j3th6HBM_J6iCUJLXY8KD1abtamacX8cBr5XZ0HI067Geb_JHo6VKzfCH4CCKm2ARnQRlfPTZwXgvOVk_umPYzb7oeCGpymQQKkcCtBE5GBlrUb0B47ZAKkO1fJCiUne1hR1EXdCtHfAlFOl2VqMTAQBnWNc49tOZN3meXw-Dp9ODWEpnKx-7ocrvOOjmLHzss45ORw41Ja4-v5A6AHDrWY2tPLA=w869-h765-no&quot; alt=&quot;after&quot;&gt;&lt;/p&gt;

&lt;p&gt;為求完美，連黑色 Navbar 也要照抄一下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/JqHTFTmS4gGxjQygnJfH7ZwBI3bz0qT834X5fspQ2q-579HCYV0zoIgh5MbnYssnh8UpBD0XIPmnagd13pVbdag5-laqNevBHpJ0mu-3N1J_B2Fg66z1_p9mcXb3APRzBSUPbccebUz1HMRbLaAMh4NfwGDyY9nwjA3gk15QqPC3OB0VmO0jZYlp-sRHrgzSLLhZII7k9yuuWyHtmSaiMF0zJtsgAf0cDOR0yvb_beoXm7cGZwRqULL3ziKyMv5H7qaDZLFKFKKLE7ebtadNeTDA0RRt-0XbIL2eCG31CRHiLWS_7VYlz4BpAVGD0rm-85fk_WBRo0rdm278A0VWqQ7c6IoYdGWb1c97mO69zf46KAiMWo0V5eJqyMERPqtErZLjT6ZOZD1YvUv-N8kyEz_bhJXGcZ0P-PHE7W7ewfAblX823-bgtA5r1Ay_09uyqpofNq8hyB5_8KcuAHaGocxk4NaKV2Kcw5149l-k2Hz3qZ6zFzMwg1Jyob7TWWO-2NIiYSn_eOSq5Tkh6IQbLlu4B1eAjoxzsibjuvMNqxemO7mGilw0qj3PIMH9-fvE_xeatydxtBncjGJvbENBx7wbv2G8Bmo_a9Y3t-3JBbLZ8INxlDvSug=w399-h684-no&quot; alt=&quot;mobile&quot;&gt;&lt;/p&gt;

&lt;p&gt;大GUY 4這樣&lt;/p&gt;

&lt;p&gt;認同請分享&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://yukaii.tw/blog/2017/03/29/new-primer-css-github-theme/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2017/03/29/new-primer-css-github-theme/</guid>
        
        
      </item>
    
      <item>
        <title>用 restore-source-tree 一次還原 source map 網站原始碼</title>
        <description>&lt;h2&gt;前提是在 Production 環境下有 sourcemap 可以拿辣！&lt;/h2&gt;

&lt;p&gt;本篇內容也不多，大概就是介紹一下思路。&lt;/p&gt;

&lt;p&gt;前幾天看到這篇 &lt;a href=&quot;https://medium.com/statuscode/dissecting-twitters-redux-store-d7280b62c6b1&quot;&gt;Dissecting Twitter&amp;#39;s Redux Store&lt;/a&gt; 覺得十分優雅，今天猛地想起某國內網站也是用 React/Redux 弄的，便依樣畫葫蘆，想從 redux store 裡看出些端倪。&lt;/p&gt;

&lt;p&gt;打開 Chrome Devtool，不開還好，一開便發現他們的 sourcemap 在 production 竟然拿得到啊 😂，於是就來找了 &lt;code&gt;restore-source-tree&lt;/code&gt; 套件。&lt;/p&gt;

&lt;p&gt;由於該套件會把 webpack 產生的註解給移掉，而新版 webpack 註解格式又和舊版不太一樣，如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;WEBPACK_FOOTER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/** WEBPACK FOOTER **'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 舊版註解&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;WEBPACK_FOOTER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'// WEBPACK FOOTER //'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 新版註解&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;會造成該套件解析不出原始碼，不對啊，DevTool 明明就看得到。&lt;/p&gt;

&lt;p&gt;更麻煩的，Extract css plugin 產生出來的註解又和新版的不太一樣（搞啥啊），所以我在 &lt;a href=&quot;https://github.com/Yukaii/restore-source-tree/commit/74b32d5beb73f28393a2a6fa152ba8a5e2633907&quot;&gt;&lt;code&gt;74b32d&lt;/code&gt;&lt;/a&gt; 這個 commit，乾脆就把移除註解的方法拿掉了 XD&lt;/p&gt;

&lt;p&gt;若大家想要使用我修改過版本的 &lt;code&gt;restore-source-tree&lt;/code&gt; 請直接在終端機打上以下指令安裝吧：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm install -g Yukaii/restore-source-tree#98ccfc2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;然後呢？&lt;/h2&gt;

&lt;p&gt;比如說某站 production 的 js bundle file 長這樣：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;https://xxxx.com/build/bundle-54fbd34f.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;如果&lt;/strong&gt;有 sourcemap 的話，檔案結尾註解部分會長的像這樣：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//# sourceMappingURL=bundle-54fbd34f.js.map&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那我們就把 sourcemap 載下來：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;curl https://xxxx.com/build/bundle-54fbd34f.js.map &amp;gt; bundle-54fbd34f.js.map
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後用剛剛裝好的 &lt;code&gt;restore-source-tree&lt;/code&gt; 還原原始碼：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;restore-source-tree -n --out-dir &amp;lt;dir&amp;gt; bundle-54fbd34f.js.map

&lt;span class=&quot;c&quot;&gt;# -n 參數是包含 node_modules 資料夾&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# --out-dir 參數後面加要存進的目錄&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 請參考原專案 github 說明：https://github.com/alexkuz/restore-source-tree&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;登愣，就好啦！（好了是長怎樣？不告訴你）&lt;/p&gt;

&lt;h2&gt;欸嘿&lt;/h2&gt;

&lt;p&gt;看到這邊就知道，其實我們要逆向操作網站的開源也是可以的，可以寫一個 cronjob，定時把 sourcemap 抓下來，如果 bundle hash  有更新的話，就重新還原一次並 commit 進某 repo。&lt;/p&gt;

&lt;p&gt;當我沒說啦(X)&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://yukaii.tw/blog/2017/02/21/restore-source-code-from-sourcemap-file/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2017/02/21/restore-source-code-from-sourcemap-file/</guid>
        
        
      </item>
    
      <item>
        <title>在 2017 年，我是怎麽看動畫的</title>
        <description>&lt;h2&gt;在 2017 年看動畫是怎樣的一番體驗&lt;/h2&gt;

&lt;p&gt;標題下成這樣更有知乎味兒，不過就先這樣吧。一副就是要在西洽發自介文的節奏。&lt;/p&gt;

&lt;p&gt;我大概在 08/09 年左右入坑，入坑動畫是 K-ON。那時大概都是在&lt;strong&gt;微笑動漫組&lt;/strong&gt;網站上看的，每週動漫組都會固定更新上傳到免空，還是個 MegaUpload 活躍的時代，就這樣陸陸續續看了幾部上面有的舊動畫。&lt;/p&gt;

&lt;p&gt;後來不知道為何，該站被抄家或不經營了，只好改入 BT 教。從 dmhy 找種下載，當然除了動畫也有不少奇妙的東西，這邊就不提了。熱門檔當然載很快，冷門的就有得等了。&lt;/p&gt;

&lt;p&gt;上大學後有了限制多多的宿網，既不能載 BT，一天也只有 5G 的流量限制，只好用各種方式突破。先是在老家架了 DD-WRT 的 VPN，連回家載 BT，因為流量限制，後來也找了各種免空、BT 代載的服務，比如 miroko、furk 啦等等，先幫你載好，接下來在換日前（就是午夜十二點啦）估算好網速流量，一次搞定好大檔案。不過說實話動畫那麼大的很少啦，大多是 XX 和 OO 比較多。&lt;/p&gt;

&lt;p&gt;再後來搬出去住，靠室友的神 NAS 擋著，既可以代載也可以當 VPN，已經什麼問題都沒了，不過還需要到 BT 站複製 magnet 連結，無法一次到位。&lt;/p&gt;

&lt;p&gt;還有段時間在臉書經營的動漫網站看，用 Facebook 影片看是挺方便的，不過以當時來說速度沒那麼理想 😅&lt;/p&gt;

&lt;p&gt;現在各式影音串流網站百花齊放，某 B 站可以加掛 Unblock Youku 解鎖，國內也有正版的動畫瘋可以用，還有各路大大用免洗帳號無時差上傳 Youtube，至此看動畫的成本已經非常低了。&lt;/p&gt;

&lt;h2&gt;搭配 Chromecast 接上電視&lt;/h2&gt;

&lt;p&gt;大量利用動畫瘋以及 Youtube 就是因為他們的 App 才有支援 Chromecast XDrz。因為目前還在使用 iPhone 而且沒有 Apple TV，真是奇妙的果粉狀態。&lt;/p&gt;

&lt;p&gt;Chrome 目前可以用瀏覽器投影的方式來投影畫面，動畫的表現也還算順暢，這樣搭配起來倒也 OK。&lt;/p&gt;

&lt;p&gt;最近還多買了個 Android TV 放在老家，同樣支援 Chromecast 協定以及 AirPlay（付費 App），放起來也還不錯。還可以自行安裝 apk，不愧是 Android 啊 www&lt;/p&gt;

&lt;p&gt;總之大螢幕看起來就是爽啊，若有更高階的音響設置就更讚啦 XD&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://yukaii.tw/blog/2017/02/15/how-do-i-watch-anime-in-2017/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2017/02/15/how-do-i-watch-anime-in-2017/</guid>
        
        
      </item>
    
      <item>
        <title>總結一下我身為開發者的 2016</title>
        <description>&lt;h2&gt;新年快樂&lt;/h2&gt;

&lt;p&gt;你說一月一號放假要幹嘛？除了出門曬曬太陽走走之外（天氣有夠好！），當然按照慣例的要來發一篇「新年新希望新目標」、「過往一年的總結」。不過常常年底到了，卻悔恨今年又一堆目標沒有達成。為了防止這種狀況發生，我們就別寫展望了，直接來寫回顧就好啦 XD！未來總是充滿變數而不可預知，總結過往一年的種種，應該能帶來一些前進的動力吧。&lt;/p&gt;

&lt;p&gt;作為一個&lt;strong&gt;混亂邪惡&lt;/strong&gt;的學生開發者，學生當然只是個好用的擋箭牌身份，其實我的真實身份是...&lt;del&gt;昆庫星團第十五號小行星的混血王子&lt;/del&gt;（太二了這個）。2016 是我個人專案多產的一年，雖然沒有到一個月一個作品，不過上的了檯面的倒是不少。「上的了檯面」當然是以目前自己的標準來看，再過不久可能就通通打入垃圾玩具的等級了哈哈！QAQ&lt;/p&gt;

&lt;h2&gt;前端大平台&lt;/h2&gt;

&lt;p&gt;從整整一年前的 &lt;a href=&quot;https://github.com/Yukaii/ImgurDownloader&quot;&gt;Imgur 相簿下載器&lt;/a&gt; 開始，踏入了 React/Redux 的大坑，再於過年期間開發了 &lt;a href=&quot;https://github.com/Yukaii/kaif-ios&quot;&gt;Kaif.io 論壇 iOS App&lt;/a&gt;，對 React/Redux 更進一步熟悉；五月左右，承先啟後的再度使用 React/Redux 加上 Electron 開發了 &lt;a href=&quot;https://github.com/ComicsReader/app&quot;&gt;Comics Reader 漫畫閱讀器&lt;/a&gt; ，然後到最近兩週的 &lt;a href=&quot;https://github.com/Yukaii/cafenomad-app/&quot;&gt;cafenomad 臺灣工作咖啡廳&lt;/a&gt; 專案。&lt;/p&gt;

&lt;p&gt;四月多時，把原本在 &lt;a href=&quot;http://yukaihuang93.logdown.com&quot;&gt;Logdown&lt;/a&gt; 的部落格搬到 &lt;a href=&quot;https://github.com/Yukaii/yukaii.github.io&quot;&gt;GitHub Pages&lt;/a&gt; 上，用 &lt;a href=&quot;https://github.com/Yukaii/Blog&quot;&gt;Jekyll 建置&lt;/a&gt;。承襲「用力操壞 GitHub Pages」的中心思想，在九月底做了致敬好碰友 Neson 前作的&lt;a href=&quot;https://github.com/Yukaii/ics-scheduler&quot;&gt;行事曆課表產生器&lt;/a&gt;，又在十月底開始了&lt;a href=&quot;https://github.com/puraku/app&quot;&gt;桌面版噗浪 App 計劃 - Puraku&lt;/a&gt;，首次嘗試 Vue.js 並結合 Electron。&lt;/p&gt;

&lt;h2&gt;各式玩具&lt;/h2&gt;

&lt;p&gt;大概在四月左右，在學校選了永遠做不爛的&lt;a href=&quot;https://github.com/Yukaii/reversi-js&quot;&gt;黑白棋&lt;/a&gt;當題目，於網頁上重新實作（Team Project）。&lt;/p&gt;

&lt;p&gt;大概六七月在寫 Comics Reader 時開了 &lt;a href=&quot;https://livecoding.tv/yukaii/&quot;&gt;LiveCoding.tv 的直播&lt;/a&gt;，第一次享受當直播主，雖然自嗨放歌居多但也挺有趣的。&lt;/p&gt;

&lt;h2&gt;胎死腹中&lt;/h2&gt;

&lt;p&gt;六七月時漸漸的對 Redmine 專案管理工具上癮，無奈沒有一個非常現代的 App 可以用，跟同事&lt;a href=&quot;https://github.com/ChengHsuanLiu/redminePro&quot;&gt;開了個坑&lt;/a&gt;不過就這樣放到現在......&lt;/p&gt;

&lt;p&gt;其它還有從 NTU Garage Demo Day 聽來的 &lt;a href=&quot;https://github.com/Yukaii/IgHero/issues/1&quot;&gt;Idea&lt;/a&gt; 啦、從 Reddit AppIdeas 版幹來的 &lt;a href=&quot;https://github.com/Yukaii/read-n-share/issues/1&quot;&gt;Idea&lt;/a&gt; 等等。&lt;/p&gt;

&lt;h2&gt;總結&lt;/h2&gt;

&lt;p&gt;總的來說 2016 是我自稱前端工程師&lt;strong&gt;花式練手招搖撞騙&lt;/strong&gt;的一年，可惜的是作品平均完成度就差不多六七成上下，坑開的多，做完的少。因為時間有限又常常有緊急主線任務，一個個 Context Switch 間，原專案的衝刺週期斷了線，頓時失去維護前一個專案的拼勁。（怎麽說的好像 Side Project 才是我的本業 XDDD）&lt;/p&gt;

&lt;p&gt;前端大環境 Hype Driven Development 之下也讓我幾乎沒有忠誠度，反正就挑順手的，遵守拼湊型軟體工程師的教條，成品有出來就好。雖然也有對少數開源 Library 做點貢獻，但跳來跳去之下總沒有對框架工具深入研究，甚至發展出自己的，工程水平沒多少長進。&lt;/p&gt;

&lt;p&gt;另外，儘管做這些 Side Projects 之初，幾乎是以完整產品為目標開發的，但後續的打磨以及推廣宣傳幾乎沒達成，大多當成自己的玩具，除了噗浪桌面版 Puraku 好不容易有在臉書前端社群貼過一次文（好笑的是貼完就沒 commit 了）。&lt;/p&gt;

&lt;p&gt;對 2015 年的我來說，或許 2016 是個充滿驚喜的一年，在如此多產是 15 年的我無法企及的；不過說到底，工程師的價值也不在這種地方，只能說是興趣驅使吧。雖然文章開頭說了「沒有展望沒有期待」，但還是小小期許一下，希望 2017 的我能在這條路上走的更深入些（&lt;del&gt;然後就被抓去當兵了&lt;/del&gt;）&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Jan 2017 00:00:00 +0800</pubDate>
        <link>http://yukaii.tw/blog/2017/01/01/my-2016-summary-as-a-developer/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2017/01/01/my-2016-summary-as-a-developer/</guid>
        
        
      </item>
    
      <item>
        <title>React Native Facebook Native Ads 奮鬥戰記</title>
        <description>&lt;h2&gt;Native Ads?&lt;/h2&gt;

&lt;p&gt;文章標題就出現了兩次 Native，實在有點拗口。關於甚麼是 Native Ads（原生廣告） 可以參見 Facebook 的&lt;a href=&quot;https://developers.facebook.com/docs/audience-network/native-ads&quot;&gt;官方說明&lt;/a&gt;，以下引用之：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;原生廣告能讓您在為應用程式設計完美的廣告單位時，掌控所有細節。透過「原生廣告 API」，您可決定廣告的外觀、風格、大小和位置。因為廣告的格式由您決定，所以廣告能與應用程式搭配的天衣無縫。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;簡單來說就是「&lt;strong&gt;將廣告和你的 App 更好的整合&lt;/strong&gt;」，以期能帶來&lt;strong&gt;更多地的點擊&lt;/strong&gt;，&lt;del&gt;騙&lt;/del&gt;更多的使用者按下去，比如最常見的就是你大狄卡留言區塊藏著的業配廣告啦，還有 twitter、Facebook 各平臺偽裝成一般貼文廣告等等。&lt;/p&gt;

&lt;h2&gt;React Native Integration&lt;/h2&gt;

&lt;p&gt;React Native 把網頁開發的體驗帶到 App 上，不過 Facebook 沒有提供官方版的 Native Ads 模組，我們只好自行想辦法啦。我們這裡選擇的是 &lt;a href=&quot;https://callstack.io&quot;&gt;CallStack&lt;/a&gt; 提供的第三方模組：&lt;a href=&quot;https://github.com/callstack-io/react-native-fbads&quot;&gt;&lt;code&gt;react-native-fbads&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;

&lt;h2&gt;花式踩雷&lt;/h2&gt;

&lt;p&gt;先講結論：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;開源專案當覺得 README 寫的不痛快的時候，去看 example code，找出範例比你多寫的地方。&lt;/li&gt;
&lt;li&gt;有問題先看 Log。Native Module 的 Log 得用各平臺原生 IDE 看，比如 XCode 或 Android Studio。雖然不想開還是得開一下&lt;/li&gt;
&lt;li&gt;噴錯誤訊息時從上游(原生模組的來源)文件查起&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;SDK 設定&lt;/h3&gt;

&lt;p&gt;大多新版 React Native 原生模組的安裝都可以用 &lt;code&gt;react-native link xxx-module&lt;/code&gt; 搞定，不過有些時候卻沒啥用，跑完指令之後還需要手動設定。&lt;/p&gt;

&lt;p&gt;iOS 版 SOP：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;加入 &lt;code&gt;node_modules/xxx-module/ios/xxx.xcodeproj&lt;/code&gt; 到 Library&lt;/li&gt;
&lt;li&gt;把 Product &lt;code&gt;xxx.a&lt;/code&gt; 加到 Build Phase 裡&lt;/li&gt;
&lt;li&gt;若有額外引用 header，更新 Header search Path&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Android SOP:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;修改 &lt;code&gt;settings.gradle&lt;/code&gt;、&lt;code&gt;build.gradle&lt;/code&gt;、&lt;code&gt;MainApplication.java&lt;/code&gt; 等&lt;/li&gt;
&lt;li&gt;檢查 &lt;code&gt;AndroidManefist.xml&lt;/code&gt; 需不需要修改&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大 GUY 是這樣，&lt;del&gt;react-native-fbads 的 README 就有些簡單，關於 Android 的寫的也不多，算是一個大坑，AndroidFanefist 的修改還是看他們範例才發現的，不知道到底寫在文件的哪裡，若有人知道希望可以回報下讓我瞭解（感謝）&lt;/del&gt;。原生如果設定到 Build 成功，而且引入之後沒有噴錯基本上就 OK 了。若還有其它錯誤可以視為上游問題或 Native 層的問題（汗）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;更新：結果就寫在 README 裡，眼殘崩潰，不過還是給我遇到個新坑，參見 &lt;a href=&quot;https://github.com/callstack-io/react-native-fbads/issues/17#issuecomment-269749636&quot;&gt;callstack-io#17 (comment)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;Audience Network 驗證流程&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/wbd3rYblzS8AnyIt1KPeYJcJW3oKcmk55Fa2K5wZj5d6mIkJ4Ir627vhrE4f7b3ukiim7pI92nZhZADT4C7quX_siaYWwUEOS0xeqsGpkz9k0OBHg9KGp_4xlUx0osVB_HUO4ZBb4sdziMM0bMXP7UgT1WlXx1ysG1XTcN5EHeLdtpBzBq-YUnK3yZ_gSaPJo6CusCaehMkym9FRr4hRBjyfVol4tMwZdzmtALbKMqhaiqfDkYuX8vsEeDp9Og2WhZSdigzVH8Q085LBg2AV0aG3-c5OXna50HavXEiE_T5baB-zPKoWlKiqDgflAM32_Br9DcXGxdHh7FxA6u7yS5I7Zj_Q1w5Ff_6Eo7RufuwkjnTyDxq8Y_PexEU2QhQmYAMjFNLkCQlzxzV6BRtb8oDOFc5c20c1OI2k7gagkVwXeUKfA1RBjihghVrpVMhCSbHiGohKA2ntI8Il6iXqcABQ0MWU90EmXJZaEsO7D9UU0VwC_GFWAw4aYvRQCTw7hLAm9FTQvS4okPGR47OmJpyXrf7l0Qv8VrgCEiigZos6NfmGceeBRkj8xBhv63F7WjGmT_He5DUtk8I6yce6_WRh8XQ0HwKJnkX19EHZqk02oDxzqy9PTw=w801-h353-no&quot; alt=&quot;audience-network-stage&quot;&gt;&lt;/p&gt;

&lt;p&gt;Audience Network 分成好幾個驗證階段，簡略過程如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;拿到版位 Placement ID 之後編寫 App 顯示廣告的程式碼&lt;/li&gt;
&lt;li&gt;在 Audience Network 新增應用程式
3. 用「原生模擬器」（iOS 就 Simulator，Android 要用 AVD）傳送廣告要求&lt;/li&gt;
&lt;li&gt;等待應用程式審核通過&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其中第三點「&lt;strong&gt;傳送廣告要求&lt;/strong&gt;」是最多雷的，iOS 早早就審核過了，Android 怎麽發要求 Facebook 就是無法接到，最後改用 Android Studio 原生的模擬器就一次 OK，原來是沒法用 Genymotion 的模擬器跑...&lt;/p&gt;

&lt;p&gt;最後上 TestFlight 之後在我自己手機上無法顯示，查了一下錯誤代碼 &lt;a href=&quot;https://developers.facebook.com/docs/audience-network/testing&quot;&gt;1001 - No Fill&lt;/a&gt;，發現原來是手機上沒有安裝 &lt;strong&gt;原生 FB App&lt;/strong&gt;，難怪我 Dcard 從來沒看過廣告 XDD，以下是其它不會顯示廣告狀況，從文件引用：&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Error 1001 - No Fill. May be due to one or more of the following:&lt;/li&gt;
&lt;li&gt;User not logged into Native Facebook App on Mobile Device&lt;/li&gt;
&lt;li&gt;Limit Ad Tracking turned on (iOS)&lt;/li&gt;
&lt;li&gt;Opt out of interest-based ads turned on (Android)&lt;/li&gt;
&lt;li&gt;No Ad Inventory for current user&lt;/li&gt;
&lt;li&gt;Your testing device must have the native Facebook application installed.&lt;/li&gt;
&lt;li&gt;Your application should attempt to make another request after 30 seconds.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 22 Dec 2016 00:00:00 +0800</pubDate>
        <link>http://yukaii.tw/blog/2016/12/22/react-native-facebook-native-ads-integration/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2016/12/22/react-native-facebook-native-ads-integration/</guid>
        
        
      </item>
    
      <item>
        <title>Electron 的 Trello 桌面版應用程式</title>
        <description>&lt;h2&gt;啊 Electron 不就好棒棒&lt;/h2&gt;

&lt;p&gt;Electron 簡單來說就是加料版的 Chromium，可以跑 node 環境，還能讓 Web App 也能使用原生桌面環境的 API。現在你我的桌面早就被一堆 Web App 攻佔，比如我最常用的：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nylas.com/&quot;&gt;Nylas N1&lt;/a&gt; - Email 軟體&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; - 微軟出的輕量級編輯器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.getpostman.com/&quot;&gt;Postman&lt;/a&gt; - REST 測試御用輔助工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://slack.com/&quot;&gt;Slack&lt;/a&gt; - 社內通訊&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.notion.so/&quot;&gt;Notion&lt;/a&gt; - 筆記，雜想&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hyper.is/&quot;&gt;Hyper&lt;/a&gt; - 終端機，不過不能輸入中文所以就沒再用了。開發的 &lt;a href=&quot;https://github.com/zeit&quot;&gt;zeit&lt;/a&gt; 社也滿猛的&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sindresorhus/caprine&quot;&gt;Caprine&lt;/a&gt; - Facebook messenger 桌面版&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;隨便列就一堆了，相當於電腦裝了十幾個網頁瀏覽器，有夠肥一個就一百多 MB 😅，根本快速開發的代價。&lt;/p&gt;

&lt;p&gt;Web App 相對於傳統的桌面軟體迭代應該算十分快速了啦，光 Flexbox Layout 就不知道方便多少了...好啦其實我唯一寫過的傳統桌面軟體也只有用 JavaFX 學校作業，也只花了三天趕工哈哈哈...也是沒慢到哪裡去啦，咦？&lt;/p&gt;

&lt;h2&gt;Nativefier&lt;/h2&gt;

&lt;p&gt;有段時間我很喜歡用瀏覽器的「Pin Tab」功能，現在 SPA 又那麼猖狂，App 用 Chrome 開就行了，只要用 Chrome 的快速鍵 cmd + 1/2 就直接跳回前幾個 pin 好的 App。不過因為使用的 Extension 實在有點多，所以常常感到 Chrome 頓挫，此時用 Electron App 就相當於用一個乾淨的瀏覽器，速度快了許多。&lt;del&gt;其實你把 Extension 移乾淨不就得了。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;社群前陣子也有大大推了一個叫 &lt;a href=&quot;https://github.com/jiahaog/nativefier&quot;&gt;&lt;code&gt;nativefier&lt;/code&gt;&lt;/a&gt; 的工具，只要設定一下，就能把網站包到 Electron 的 WebView，立馬變桌面 App。&lt;/p&gt;

&lt;p&gt;通常我們在實作這種網頁直接包成 App 的，除了單純用 Electron &lt;code&gt;BrowserWindow&lt;/code&gt; 或 &lt;code&gt;webview&lt;/code&gt; API 載入 Web App 網址外，還需要 inject 一些額外的 JavaScript 來整合桌面功能，比如快捷鍵跳轉特定功能啦、改變配色啦。&lt;/p&gt;

&lt;p&gt;大神 sindresorhus 的 &lt;a href=&quot;https://github.com/sindresorhus/caprine&quot;&gt;Caprine&lt;/a&gt; 便是個好例子，還有 terkelg 的 &lt;a href=&quot;https://github.com/terkelg/ramme&quot;&gt;Ramme&lt;/a&gt;，單純的改變原本就已經用 React 做成 SPA 的 Instagram 的排版，也加入了快速鍵功能，便是一個堪用的 Instragm 桌面應用軟體了。當然真正好用的 IG 桌面 App 還是非原生莫屬，在此推薦一下 &lt;a href=&quot;https://itunes.apple.com/us/app/flume-for-instagram/id792425898&quot;&gt;Flume for Instagram&lt;/a&gt;。&lt;/p&gt;

&lt;h2&gt;Trello feat. Electron&lt;/h2&gt;

&lt;p&gt;最近重回 Trello 懷抱。為配合我的使用習慣，就找了找對應的桌面軟體，找到了兩個：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://friendlyfox.es/pawsfortrello/&quot;&gt;Paws for Trello&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/danielchatfield/trello-desktop&quot;&gt;Trello Desktop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;這兩個 App 幾乎一樣，就是把 macOS 的 titlebar 藏起來讓紅綠燈好看一些。儘管前者在 App Store 上架，可是功能沒比後者多多少哈哈。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/gDwO7Rcc_DiHTqNTa9W8_u5WggQxm1km4TL630k66fGucUYCKoU4PEjqVodsSsB5wtw1rHket9Mnh-2qSyPWIU0Nn0TZsoLOitMniwifs2JFkgQJysppEK0rTDsPasRDvj1-axpA6oEanesF-42NvwTAWxeVmN-SjspdOPUxgdj8P9LkJPHACA49dCYXPfHrfbqP_SsFYKL7FlReq9b0Xbs5VWQmCPlWewyN12bZQq7-j3_POwhXRwPqFwvb5zfx9in7AibIxgz5wQAgNR-TUVwiPvN0nKIX5XrMVPCLHOgsHsIeFfQuHZuJaJ56kZ5kc-t9m11F5x0_BB6uoODrHd8UEumqEDA9hHGh8P4jnVMXYXmBZjGCcpSaIK_076JKVgUZ_cVxzcC_oDa0_YfS4Si-9qbT8RKEK-AMhvNKYVhsJ6z1N1ZCeG4O57uqmn0TzM6iBMQ_01LXYt1Db4AQxRdoE7m5PgbUU-WOkN_ZhJhRFcsIDxLoZT9gngSJlAZJT0j9t0G9hniF5uImwh7onklliQayTsA8N9PpJc-CpkrVjko3WjAbXyNqzrdm1QCDScI0PV2cEhFy4BJvsFFfZUrXl1W7PdYJJKHYfVUTRrDeAIIfiQ=w971-h626-no&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;後者 Trello Desktop 雖然免費，目前有個最大的問題：沒辦法&lt;a href=&quot;https://github.com/danielchatfield/trello-desktop/issues/6&quot;&gt;拖拉視窗&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;當然也有開發者直接發了 &lt;a href=&quot;https://github.com/danielchatfield/trello-desktop/pull/13&quot;&gt;Pull Request&lt;/a&gt; ，不過專案好像已經被放生了一樣，坑主都不回的。作為一個略懂 Electron 的開發者就來自行修正一下吧。&lt;/p&gt;

&lt;p&gt;仔細看下 &lt;a href=&quot;https://github.com/danielchatfield/trello-desktop/pull/13&quot;&gt;PR&lt;/a&gt; 其實也就加三行 css，我們要做的就是把這個 PR，patch 到我們本機的 Trello Desktop App 裡。&lt;/p&gt;

&lt;p&gt;做法有兩種，其中一種是 clone 改完的版本，重新建構 Electron App，不過太麻煩了，我們就直接 patch 本機的 css 比較快。&lt;/p&gt;

&lt;h2&gt;Patch Elecron Client code&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/electron/asar&quot;&gt;asar&lt;/a&gt; 簡而言之就是 electron 封裝 client code 的格式，一般在建構 Electron App 會預設使用。我們先安裝下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm install asar -g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;現在就可以解開 asar 檔了，進到 App Package 裡：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /Applications/Trello.app/Contents/Resources/
asar extract app.asar app &lt;span class=&quot;c&quot;&gt;# 解開 app.asar 檔案到 app 目錄&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;app &lt;span class=&quot;c&quot;&gt;# 進去 app 目錄&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;編輯 &lt;code&gt;browser.css&lt;/code&gt; 加入更改的 css&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#header&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;-webkit-app-region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Electron 預設便會讀 app 目錄或 app.asar 檔案，重新開啟 App 後就可以自由移動視窗啦，跟桌面軟體有 87% 像！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/w7WF_SiDo7mrJanSRR72ieb_NTOPpblGcK-nMovxrnQvAG_1fcKuZ_EhIC_5_8-kXSIztIoEMk3l2gqoNlQx8VOS1UW98E6YVlBqV8qJOLD7YPAeY_eVZWWpdHkbtuBQh3O5g_xcFU-_IiHlVOcDVWiAdfdQipK7AmN7RHNs5fuTMLEo4ZDRZGH3ic9u92FT4A8n2z75P9y7kWMmYhQ_lyuFWaOSyxwXke_iJR0UY9L1uMnW856i651cuQNlp2br9rGAB-LSGKElDQpI64h2HxTk9eln2tMcvMG1SO9Qz6AF7kcbFanCL7uKv1AoGGX81qlGugiUtkq_I8uNASIVbPaeVxSdJniKa46DJuc-twautw6qdHUQ5jgpJyKOmUtbosVeJK5DS50jrsGzyOQPVbH7SzVpavlpKqnUAxOZ9AEAsxX0sf6cROCPtvHe3UvUqSTEwXk841vTgoxrS27ysLXVRVhdZe8CEE5vSbDIIObdHkV0CVULCWRKspmFInNEd4m-cvE4pHWdycItvMJo7dqN5gydHPIBZzU7z50b8Hn2_wYzUA7miYPvpMpOmsaW4BSOwkW1bPHGG0_2mf0gGWlR8URwayBvSouObSCoaDDGostsNw=w1188-h737-no&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://yukaii.tw/blog/2016/11/12/patching-trello-desktop-electron-app/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2016/11/12/patching-trello-desktop-electron-app/</guid>
        
        
      </item>
    
      <item>
        <title>在 Electron 使用 IPC 串聯前端和 Node API</title>
        <description>&lt;p&gt;這是我最近在實作噗浪 electron app - &lt;a href=&quot;https://github.com/puraku/client&quot;&gt;&lt;strong&gt;Puraku&lt;/strong&gt;&lt;/a&gt; 時，使用的抽象化寫法。&lt;/p&gt;

&lt;p&gt;先談一下背景。其實在官方的 &lt;a href=&quot;https://www.plurk.com/API&quot;&gt;Plurk API&lt;/a&gt; 頁面上就已經有 &lt;a href=&quot;https://github.com/puraku/purakujs&quot;&gt;JavaScript 的噗浪 API Library&lt;/a&gt;了，不過它沒有包成 npm 可以直接使用，而且還相依於 &lt;a href=&quot;https://github.com/ciaranj/node-oauth&quot;&gt;node-oauth&lt;/a&gt; 套件，看名字就知道和 Node 有關。&lt;/p&gt;

&lt;p&gt;這次寫的 &lt;a href=&quot;https://github.com/puraku/client&quot;&gt;puraku&lt;/a&gt; 是一個以前端為主的桌面軟體，所以我勢必要對噗浪的 API 套件做些改寫。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;更新&lt;/strong&gt;： 其實 Electron renderer process 就能呼叫 node API 了，只是我先入為主的以為 main process 才能使用，所以引發了這個軟體問題 XDrz。&lt;/p&gt;

&lt;h2&gt;重新封裝 API Library&lt;/h2&gt;

&lt;p&gt;我已經包裝成 &lt;a href=&quot;https://github.com/puraku/purakujs&quot;&gt;purakujs&lt;/a&gt;，它是個可以直接使用的 Plurk API Node library，雖然這年頭也沒多少工程師在串噗浪 API 了 😅 。值得一提的是 yarn 對 &lt;code&gt;npm link&lt;/code&gt; 的支援不太好，在設定本機開發環境跑完 &lt;code&gt;npm link&lt;/code&gt; 後，不要在 &lt;code&gt;package.json&lt;/code&gt; 修改套件版本，防止在跑 &lt;code&gt;yarn install&lt;/code&gt; 指令時又噴錯。&lt;/p&gt;

&lt;h3&gt;Electron&lt;/h3&gt;

&lt;p&gt;關於 Electron 是啥便不再贅述。&lt;del&gt;要知道的是只有在 Electron 的 Main Process 裡才可以呼叫 node 的 api&lt;/del&gt;（錯了），所以把 node-oauth 套件放在這跑是沒問題的，但 Renderer Process 才是主要觸發 API 的地方（換頁、捲動、按鈕等）。Electron 提供了 IPC 的 API 界面實作，可以這樣寫：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;commit &lt;a href=&quot;https://github.com/puraku/client/pull/5/commits/df4c8a225a36485747f7022b1391b50ee9e9f19c&quot;&gt;df4c8a2&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Renderer Process&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ipcRenderer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'electron'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ipcRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sendSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'puraku:api'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Main Process&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;ipcMain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'puraku:api'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;myApiClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;returnValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;returnValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Renderer Process 送出 API 請求到 Main Process，已經正在監聽的 Main Process 在呼叫完 API 請求(&lt;code&gt;myAPIClient.request&lt;/code&gt;)之後，返還資料給 Renderer Process。在這裡透過 ipcMain 建立叫做 &lt;code&gt;puraku:api&lt;/code&gt; 的事件監聽，由 &lt;code&gt;ipcRenderer&lt;/code&gt; 送出事件請求。&lt;code&gt;event.returnValue&lt;/code&gt; 是 ipc 的同步寫法。一旦使用同步，整個 Renderer Process 在送出事件請求(&lt;code&gt;ipcRenderer.sendSync&lt;/code&gt;)之後會被 Block，所以我改用非同步的 IPC 寫法，再用 Promise 封裝。&lt;/p&gt;

&lt;h3&gt;Asyncronous IPC&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;commit &lt;a href=&quot;https://github.com/puraku/client/pull/5/commits/3f2fee64664c4082520a3a8b9ffe6d90cb6cfdbd&quot;&gt;3f2fee&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Renderer Process&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ipcRenderer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'electron'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ipcRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'puraku:api'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;ipcRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;puraku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Main Process&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;ipcMain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'puraku:api'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;myApiClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;puraku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;puraku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這一版跟上面的差別在於，Renderer Process 送請求給 Main Process 之後，馬上建立另一個 IPC 的 Listener 等待 Main Process 回調，而 Main Process 在處裡完 API 請求之後(&lt;code&gt;myAPIClient.request&lt;/code&gt;) 再用 IPC 非同步寫法回傳資料(&lt;code&gt;event.sender.send&lt;/code&gt;)。在這個版本 IPC 關係變得比較複雜，簡單畫了一下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;Promise start  +-----+
                     |           Renerer Process                 Main Process
                     |
                     +-----&amp;gt; +--------------------+
                             |                    |
                             |  ipcRenderer.send  |
                             |                    |         +---------------------+
                             +------------------------------+                     |
                             |                    |         |  API request        |
                             |  ipcRenderer.once  |         |                     |
                             |                    |         |  event.sender.send  |
                             |  create listener   |         |                     |
                             |                    |         |                     |
                             +---------+----------+         +-----------+---------+
                                       |                                |
                                       |                                |
                                       |                                |
                             +---------+----------+                     |
                             |                    &amp;lt;---------------------+
                             |   Event received   |
                             |                    |
                     +-----+ +---------+----------+
                     |                 |
                     |                 |
 Promise end   &amp;lt;-----+                 |
                                       |
                                       |
                                       |
                                       |
                                       |
                                       |
                                       |
                                       |
                                       v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;IPC 事件一對一對應&lt;/h3&gt;

&lt;p&gt;可以發現在這一版的 Renderer Process 我加了一個 &lt;code&gt;timestamp&lt;/code&gt; 來簡單的區分不同的 API request，因為如果光用 API 的 Endpoint 當做事件的鍵值，戳相同 API 兩次時就會衝到。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eventKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;puraku&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不過卻發現每次取的 timestamp 還是有機會一樣，經過 Google 之後我把 &lt;code&gt;timestamp&lt;/code&gt; 亂數的產生方法改成 &lt;code&gt;performance.now()&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomSeed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;performance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eventKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;puraku&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;randomSeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到這裡，我們就可以用熟悉的 Promise 介面，在 Renderer Process 輕鬆地串接 Main Process 的 API 啦！以下是目前的實作：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Renderer Process&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ipcRenderer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'electron'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomSeed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;performance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ipcRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'puraku:api'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomSeed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;ipcRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;puraku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;randomSeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Main Process&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ipcMain&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'electron'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;ipcMain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'puraku:api'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomSeed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;myApiClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;puraku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;randomSeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;puraku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;randomSeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 Renderer Process 裡（在我的例子裡是 Vue 前端 App）就可以用簡單的介面來呼叫 API 啦！&lt;/p&gt;

&lt;h2&gt;其它&lt;/h2&gt;

&lt;p&gt;聽說用 message queue 來實作比較好，不過 It works for now，就暫時沒有更新實作的動力（懶）&lt;/p&gt;

&lt;p&gt;可以在 &lt;a href=&quot;https://github.com/puraku/client/pull/5&quot;&gt;puraku/client PR#5&lt;/a&gt; 閱讀實作的過程。自從對 Redmine 上癮之後，連 GitHub Flow 也一併愛上了，在本 Repo 一個功能就開 Branch 做成 Pull Request，就算一個人的 GitHub Flow 也能玩的愉悅 XD&lt;/p&gt;
</description>
        <pubDate>Wed, 02 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://yukaii.tw/blog/2016/11/02/use-electron-ipc-to-call-api-from-main-process/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2016/11/02/use-electron-ipc-to-call-api-from-main-process/</guid>
        
        
      </item>
    
  </channel>
</rss>
