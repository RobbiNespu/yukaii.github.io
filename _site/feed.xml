<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daily Oops!</title>
    <description>Yukai's blog. Web tech, apps, photos, and notes.
</description>
    <link>http://yukaii.tw/</link>
    <atom:link href="http://yukaii.tw/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 24 Sep 2016 12:36:21 +0800</pubDate>
    <lastBuildDate>Sat, 24 Sep 2016 12:36:21 +0800</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>用 jadx 來玩玩 Android 逆向工程</title>
        <description>&lt;h2&gt;你幹嘛沒事要來逆向工程啦&lt;/h2&gt;

&lt;p&gt;&lt;del&gt;就是因為沒事啊&lt;/del&gt;。呃不對，其實以前就有聽說過 Android 逆向工具很成熟，不過自從換 iPhone 後就沒怎麼關注 Android 發展了，一直沒機會玩到。&lt;/p&gt;

&lt;p&gt;昨天下午剛好就在臉書刷到一款課表 App，就簡稱為 「X 社小工具」好了，可以幫你匯入學校的課表，支援多個學校。看了看截圖，感覺是在手機端輸入校務系統登入帳密達成，X 社小工具會幫你抓下來，只是不知道後面 API 怎麽跑（誰知道）。秉持著好奇的心，就讓我來逆向看看吧 XDDD。&lt;/p&gt;

&lt;h2&gt;沒手機也要下載 APK&lt;/h2&gt;

&lt;p&gt;直接把 APK 的 bundle id 貼到 &lt;a href=&quot;https://androidappsapk.co/apkdownloader/&quot;&gt;androidapk&lt;/a&gt; 這個網站就可以下載了，bundle id 長得像 &lt;code&gt;com.facebook.katana&lt;/code&gt;。&lt;/p&gt;

&lt;h2&gt;jadx 反編譯工具&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/bd3c0ea851c23c4535e43590a86c940a0786faa6/687474703a2f2f736b796c6f742e6769746875622e696f2f6a6164782f6a6164782d6775692e706e67&quot; alt=&quot;jadx&quot;&gt;&lt;/p&gt;

&lt;p&gt;借一下&lt;a href=&quot;https://github.com/skylot/jadx&quot;&gt;官方&lt;/a&gt;的截圖，&lt;a href=&quot;https://github.com/skylot/jadx&quot;&gt;jadx&lt;/a&gt; 可以直接開啟 apk 檔，把 decompile 過的原始碼顯示出來；除了 gui 界面也有 command line 工具可以讓你直接轉存 source。&lt;/p&gt;

&lt;p&gt;載下來解壓縮後有四個檔案：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;.
├── jadx
├── jadx-gui
├── jadx-gui.bat
└── jadx.bat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; 進去目錄後執行 &lt;code&gt;./jadx-gui&lt;/code&gt;，GUI 界面開啟照著操作，選擇你要解開的 apk 就會顯示 Java code 了，也可以選擇轉存，用你喜歡的 Editor 或 IDE 開起來。&lt;/p&gt;

&lt;h2&gt;讀讀讀讀讀 code&lt;/h2&gt;

&lt;p&gt;不像當初 &lt;a href=&quot;https://applidium.com/en/news/unbundling_pokemon_go/&quot;&gt;Pokemon Go 被逆向&lt;/a&gt; 一樣，竟然連個混淆都沒做，X 社小工具解出來的原始碼裡，變數都被換成英文字母 abcde，不過想想我的目的就是拿到 API，就直接搜尋 &lt;code&gt;http://&lt;/code&gt;、&lt;code&gt;https://&lt;/code&gt; 網址開頭的字串~~&lt;/p&gt;

&lt;h3&gt;Retrofit&lt;/h3&gt;

&lt;p&gt;然後就找到了這段：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Retrofit&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asVar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://容我隱藏一下.appspot.com/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addConverterFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GsonConverterFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addCallAdapterFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RxJavaCallAdapterFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;callbackExecutor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AsyncTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;THREAD_POOL_EXECUTOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asVar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看網址 Server 還是用 Google App Engine 架的 XD&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://square.github.io/retrofit/&quot;&gt;Retrofit&lt;/a&gt; 是 Android 用的 HTTP 客戶端，雖然沒用過，不過對於 Retrofit 用 Decorator 標記各個 Endpoint 的寫法印象很深，Retrofit 首頁的範例就這樣寫：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GitHubService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;users/{user}/repos&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listRepos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下來只要再找出各式 Decorator 就行啦！&lt;/p&gt;

&lt;h3&gt;API Endpoints&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;schools&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;login&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Body&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eVar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;users/{uid}/schedule&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;uid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面是其中一段程式碼，看起來主要的 API Endpoint 都在這了。&lt;/p&gt;

&lt;p&gt;接下來可以用 &lt;code&gt;curl&lt;/code&gt; 或 &lt;a href=&quot;https://www.getpostman.com/&quot;&gt;Postman&lt;/a&gt; 來試打 API，從 GET 的 Endpoint 開始，照著 Login 流程做。不過打 schedule API 的時候卻發現重大問題：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我的課表根本就沒課啊！！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以 &lt;code&gt;schedule&lt;/code&gt; 只好當做不知道怎麽解了哈哈哈😂&lt;/p&gt;

&lt;h3&gt;RxJava&lt;/h3&gt;

&lt;p&gt;題外話一下，X 社小工具也用了當紅的 Reactive Programming，反編譯後的原始碼就看到一堆短短的 presenter 檔案。&lt;/p&gt;

&lt;h3&gt;其實要拿 API 也不需要反編譯&lt;/h3&gt;

&lt;p&gt;可以用 &lt;a href=&quot;https://www.wireshark.org/&quot;&gt;Wireshark&lt;/a&gt; 之類的封包擷取工具撈一下，不過還是看原始碼直接啦😅&lt;/p&gt;

&lt;h2&gt;感想&lt;/h2&gt;

&lt;p&gt;看來 ProGuard 一類的混淆工具還是有用的，變數、類別都被換掉，腦內理解搜尋速度至少慢了十倍啊，還沒辦法直接 Go to Definition...&lt;/p&gt;

&lt;p&gt;本來想寫個免責聲明，不過敏感資訊都已經藏起來了，應該還好吧 XD 這篇只是個人純粹玩工具、讀讀 code 的心得而已，不要追殺我啊 😂😂😂&lt;/p&gt;
</description>
        <pubDate>Fri, 23 Sep 2016 00:00:00 +0800</pubDate>
        <link>http://yukaii.tw/blog/2016/09/23/play-android-reverse-engineering-with-jadx/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2016/09/23/play-android-reverse-engineering-with-jadx/</guid>
        
        
      </item>
    
      <item>
        <title>Rails Girl #7</title>
        <description>&lt;p&gt;有幸在第七屆的 Rails Girl 活動中擔任教練，就來寫寫感想好了 w&lt;/p&gt;

&lt;p&gt;在當 Rails Girl 教練之前，我雖然「算是」有帶過幾位實習生，不過跟這種馬拉松式的教學完全不同，平常都不太說話的我，這兩天竟都沒怎麽停嘴，也真佩服自己了 😅&lt;/p&gt;

&lt;h2&gt;Day 1 - 裝機&lt;/h2&gt;

&lt;p&gt;對於這種體驗性質的活動，浪費時間在安裝開發環境就太可惜了。主辦的大大在會前教練通知信裡寄了一份 &lt;a href=&quot;https://codeanywhere.com/&quot;&gt;CodeAnywhere&lt;/a&gt; 網站的說明。如同名字所述，CodeAnywhere 可以讓你 &lt;strong&gt;Code Anywhere&lt;/strong&gt;（在哪裡都能寫程式），運用 Linux Container 和 Web 技術，使用瀏覽器便能連接機器、開發網站服務。只可惜 Bug 還是挺多的，比如說：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;無法做到即時 Filesystem Refresh，每次新增檔案後，都要手動重新整理專案，新增的資料夾才會出現在列表&lt;/li&gt;
&lt;li&gt;Terminal SSH Session 在重新整理瀏覽器後不會自動 kill，所以開啟的 Rails server 佔用 port，但 terminal tab 已經消失，需要找出 pid 後 kill 掉（&lt;code&gt;lsof -i tcp:3000&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;在 Terminal 界面無法使用貼上快捷鍵（&lt;code&gt;Ctrl + v&lt;/code&gt; or &lt;code&gt;CMD + v&lt;/code&gt;），對於經常性 Copy &amp;amp; Paste 的這堂課來說十分不便呀&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;附上 rails 簡易裝機指令，無論是 CodeAnywhere 環境或是 Ubuntu/macOS 應該都能使用。Ubuntu 需要事先安裝好 Git，macOS 則需安裝 XCode Developer Tools。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
&lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;url -sSL https://get.rvm.io | bash -s stable

rvm reload
rvm install 2.3.1
rvm use 2.3.1 --default

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'gem: --no-ri --no-rdoc'&lt;/span&gt; &amp;gt;&amp;gt; ~/.gemrc &lt;span class=&quot;c&quot;&gt;# 不需要安裝 rdoc&lt;/span&gt;

gem install bundler
bundle config --global --jobs 4

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'source &quot;https://rubygems.org&quot;
ruby &quot;2.3.1&quot;
gem &quot;rails&quot;
'&lt;/span&gt; &amp;gt;&amp;gt; ~/Gemfile

&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 切換至家目錄&lt;/span&gt;
bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;個人認為裝機階段實在也不需要特別解釋，說明一下 Ruby 和 Rails 的關係和豐富的套件生態系就行了&lt;del&gt;（什麼？Rails 不是語言嗎？）&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;作為一個信仰不夠忠貞的 Rails 信徒，自然會從廣義的 Web 開始講起。想到在行前會說明時，提到有個萬用便當遊戲&lt;sup id=&quot;fnref1&quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 可以用，自然就偷跑進度，直接拿便當圖來講故事啦。講故事的重點就是&lt;strong&gt;凡事回顧個兩三次&lt;/strong&gt;，並在不同時機再次連結。另外身為一個自學者，當然還是把肌肉記憶拿出來講了講，我還是覺得這挺有用的 XD&lt;/p&gt;

&lt;h2&gt;Day 2 - 跑跑進度啦&lt;/h2&gt;

&lt;p&gt;CodeAnywhere 有分享專案和 pair programming 的功能。先對專案點右鍵，並在跳出的選單選擇 Share、並輸入對方 Email 即可；而 Pair Programming 比較麻煩，每個檔案或是 Terminal 都要分享一次。如下圖所示，按下紙飛機按鈕，並輸入對方 Email：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/ky0B3yd.png&quot; alt=&quot;Imgur&quot;&gt;&lt;/p&gt;

&lt;p&gt;THE 紙飛機&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/8XTdMEr.png&quot; alt=&quot;Imgur&quot;&gt;&lt;/p&gt;

&lt;p&gt;透過 Pair Programming 的方式，即使是一次帶兩個人，也只要維護一份環境、一份專案，真是怠惰啊 😇&lt;/p&gt;

&lt;p&gt;第二天白天，我們這組跑了 Rails Girl 的兩篇教材，分別是 &lt;a href=&quot;http://railsgirls.tw/app&quot;&gt;Idea Scaffold&lt;/a&gt; 還有&lt;a href=&quot;http://railsgirls.tw/commenting&quot;&gt;留言功能&lt;/a&gt;，途中也不時對教練解釋的地方自我吐嘈了一番；下午就在各種&lt;del&gt;傳教&lt;/del&gt;閒聊之中度過了，比如 &lt;a href=&quot;https://medium.com/@juanitofatas/ruby-on-rails-%E5%9F%BA%E6%9C%AC%E4%B8%BB%E7%BE%A9-f4cde39292a4&quot;&gt;Rails 基本主義&lt;/a&gt;啦、&lt;a href=&quot;https://yukaii.tw/blog/2016/06/22/sublime-atom-vscode-comparison-mid-2016/&quot;&gt;編輯器之戰&lt;/a&gt;、&lt;a href=&quot;https://vinta.ws/blog/695&quot;&gt;鄙視鏈&lt;/a&gt;、GitHub 文化、&lt;a href=&quot;https://userstyles.org/&quot;&gt;Stylish&lt;/a&gt; 自訂網頁樣式表、&lt;a href=&quot;https://github.com/larsenwork/monoid&quot;&gt;Coding Font with Ligature support&lt;/a&gt;，還有 &lt;a href=&quot;https://djangogirls.org&quot;&gt;DjangoGirls&lt;/a&gt; 等等（在 Rails 的場子談 Django 是不是搞錯了什麼？）。畢竟這個圈子最好玩的就是聖戰以及用不完的攻城獅哏，體驗文化也是學習不可分割的一環啊！&lt;/p&gt;

&lt;h2&gt;After Party&lt;/h2&gt;

&lt;p&gt;據說 After Party 才是 Rails Girls 活動的精華......欸就這樣一行？&lt;/p&gt;

&lt;h2&gt;結語&lt;/h2&gt;

&lt;p&gt;Rails Girls 對於想接觸 Rails 或是網站入門的女性朋友來說，自然是個非常好的機會，手把手帶你寫程式還不用錢，實在是值回票價（等等！免費的活動哪來的票啊）；對身心疲憊、忙於工作的工程師教練們，也是個調劑身心的好時機，讓平常沉默的宅宅有了練蕭維的舞臺。最後感謝本活動的唯一贊助商&lt;a href=&quot;https://5xruby.tw&quot;&gt;五倍紅寶石&lt;/a&gt;，下次活動詳情就請繼續關注 &lt;a href=&quot;https://www.facebook.com/railsgirlstw/&quot;&gt;Rails Girls Taiwan&lt;/a&gt; 粉絲專頁啦！&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;參見 &lt;a href=&quot;http://blog.railsgirls.com/post/20405930015/bentobox-learn-the-language-of-technology&quot;&gt;Rails Girls 官方部落格&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 28 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://yukaii.tw/blog/2016/08/28/rails-girl-7/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2016/08/28/rails-girl-7/</guid>
        
        
      </item>
    
      <item>
        <title>部落格 GitHub 新版型主題</title>
        <description>&lt;p&gt;過程可以看 &lt;a href=&quot;https://github.com/Yukaii/Blog/pull/1&quot;&gt;PR#1&lt;/a&gt;，大致上是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;引入 &lt;a href=&quot;https://primercss.io&quot;&gt;primer css&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;清掉原本沒用到的 css&lt;/li&gt;
&lt;li&gt;Post Layout 加上 &lt;code&gt;markdown-body&lt;/code&gt; 的 class（&lt;a href=&quot;https://github.com/Yukaii/Blog/commit/31360b&quot;&gt;31360b&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;從 GitHub 上面拿 css 來用 XD&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;不囉嗦，直接上圖了。&lt;/p&gt;

&lt;h2&gt;Before&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/3rBAve0.png&quot; alt=&quot;before-1&quot;&gt;
&lt;img src=&quot;http://i.imgur.com/bXb19SE.png&quot; alt=&quot;before-2&quot;&gt;&lt;/p&gt;

&lt;h2&gt;After&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/McEpFdB.png&quot; alt=&quot;after-1&quot;&gt;
&lt;img src=&quot;http://i.imgur.com/PqH6sup.png&quot; alt=&quot;after-2&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Misc&lt;/h2&gt;

&lt;p&gt;另外附上最近弄的 VSCode Markdown Preview Theme。我習慣用暗色的 syntax highlight theme，但是 VSCode 的 Markdown Preview 會根據目前使用的 Theme，來使用亮色或暗色，所以我寫了一些覆蓋的 css，讓不論選亮色或是暗色主題都能使用明亮的 Markdown 預覽主題。與 &lt;a href=&quot;https://gist.github.com/BigstickCarpet/&quot;&gt;BigstickCarpet&lt;/a&gt; 的 GFM Theme 一起使用效果更佳 😁&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Yukaii/vscode-markdown-github-css&quot;&gt;vscode-markdown-github-css&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/hHbhwHJ.png&quot; alt=&quot;md1&quot;&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://yukaii.tw/blog/2016/08/22/blog-new-github-theme/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2016/08/22/blog-new-github-theme/</guid>
        
        
      </item>
    
      <item>
        <title>從 1Password 搬家到 pass</title>
        <description>&lt;h2&gt;Why?&lt;/h2&gt;

&lt;p&gt;pass 照&lt;a href=&quot;https://www.passwordstore.org/&quot;&gt;官網&lt;/a&gt;的說法，是一套 「標準 unix 密碼管理」（the standard unix password manager），開源簡單好用。雖然 1Password 我是用 Dropbox 同步，應該還算安全，不過多個開源選擇也不錯。&lt;/p&gt;

&lt;p&gt;pass 也有一些社群版套件，引用一下官網：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The community has even produced a &lt;a href=&quot;http://qtpass.org/&quot;&gt;cross-platform GUI client&lt;/a&gt;, an &lt;a href=&quot;https://github.com/zeapo/Android-Password-Store&quot;&gt;Android app&lt;/a&gt;, an &lt;a href=&quot;https://github.com/davidjb/pass-ios#readme&quot;&gt;iOS app&lt;/a&gt;, a &lt;a href=&quot;https://github.com/jvenant/passff#readme&quot;&gt;Firefox plugin&lt;/a&gt;, a &lt;a href=&quot;https://github.com/mbos/Pass4Win&quot;&gt;Windows client&lt;/a&gt;, a pretty &lt;a href=&quot;https://github.com/TheLastProject/Pext&quot;&gt;Python QML app&lt;/a&gt;, a nice &lt;a href=&quot;https://github.com/cortex/gopass&quot;&gt;Go GUI app&lt;/a&gt;,  an &lt;a href=&quot;https://github.com/Kwpolska/upass&quot;&gt;interactive console UI&lt;/a&gt;, Alfred integration &lt;a href=&quot;https://github.com/CGenie/alfred-pass&quot;&gt;(1)&lt;/a&gt; &lt;a href=&quot;https://github.com/MatthewWest/pass-alfred&quot;&gt;(2)&lt;/a&gt; &lt;a href=&quot;https://github.com/johanthoren/simple-pass-alfred&quot;&gt;(3)&lt;/a&gt;, a &lt;a href=&quot;https://git.zx2c4.com/password-store/tree/contrib/dmenu&quot;&gt;dmenu script&lt;/a&gt;, &lt;a href=&quot;https://git.zx2c4.com/password-store/tree/contrib/pass.applescript&quot;&gt;OS X integration&lt;/a&gt;, &lt;a href=&quot;https://github.com/languitar/pass-git-helper&quot;&gt;git credential integration&lt;/a&gt;, and even an &lt;a href=&quot;https://git.zx2c4.com/password-store/tree/contrib/emacs&quot;&gt;emacs package&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不過 iOS App 版要 jailbreak 之後才能使用呀 😭，不過身為一個還算熟悉 CLI 的使用者，這些當然都不是問題啊 😁。&lt;/p&gt;

&lt;h2&gt;安裝 pass&lt;/h2&gt;

&lt;p&gt;OS X 安裝十分容易：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;brew install pass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就好了。他也提供一些 shell completion 可以使用，&lt;code&gt;fish&lt;/code&gt; 需要在 &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; 裡加上：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; /usr/local/share/fish/vendor_completions.d/pass.fish
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;設定 pass&lt;/h2&gt;

&lt;p&gt;完成之後我們要看一下有沒有 gpg 金鑰，如果沒有的話要新增個&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gpg --gen-key &lt;span class=&quot;c&quot;&gt;# 產生 gpg key&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;記得輸入的 key phrase 呀，之後會拿來解鎖的。用 &lt;code&gt;gpg --list-keys&lt;/code&gt; 查看剛剛產生的 key，類似下面這樣：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/Users/username/.gnupg/pubring.gpg
-------------------------------
pub   2048R/A534B400 2016-08-18
uid                  My Name &amp;lt;your_email@gmail.com&amp;gt;
sub   2048R/E1001945 2016-08-18
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;pubic id 就是 &lt;code&gt;A534B400&lt;/code&gt;，拿這組 id 來初始化 pass&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pass init A534B400
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完成！之後就可以用 pass 指令管理密碼了，可以下一些測試的指令試試，比如 insert 一組 foo 的密碼：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pass insert foo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後顯示 foo 的密碼&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pass show foo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;由 1Password 匯入&lt;/h2&gt;

&lt;p&gt;官網上就寫上匯入 1password 的 &lt;a href=&quot;https://git.zx2c4.com/password-store/tree/contrib/importers/1password2pass.rb&quot;&gt;ruby script&lt;/a&gt; 😍 ，直接使用就行了。在 1Password 匯出 txt 時，記得勾選 &lt;code&gt;Include Column Labels&lt;/code&gt;，如下圖：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/YsoUQcv.png&quot; alt=&quot;1password-export-option&quot;&gt;&lt;/p&gt;

&lt;p&gt;把匯出的檔案和匯入腳本準備好，跑一下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;ruby 1password2pass.rb /path/to/1password_exported.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;基礎使用&lt;/h2&gt;

&lt;p&gt;pass 的管理可以說是相當自由，通通放在 &lt;code&gt;~/.password-store&lt;/code&gt; 目錄，底下可以建立任意的目錄分類，或是乾脆不分 XD&lt;/p&gt;

&lt;p&gt;一些基本指令：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pass show PROFILE &lt;span class=&quot;c&quot;&gt;# 印出 PROFILE 的密碼&lt;/span&gt;
pass -c PROFILE &lt;span class=&quot;c&quot;&gt;# 複製 PROFILE 的密碼到剪貼簿&lt;/span&gt;
pass ls &lt;span class=&quot;c&quot;&gt;# 列出所有密碼設定檔&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我做了以下 alias，方便快速密碼搜尋：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;passgrep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pass ls | grep -i&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就可以用 &lt;code&gt;passgrep&lt;/code&gt; 來搜尋現有設定檔了。&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://yukaii.tw/blog/2016/08/19/migrate-1password-to-pass/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2016/08/19/migrate-1password-to-pass/</guid>
        
        
      </item>
    
      <item>
        <title>使用 Chrome 在快速鍵切換至網址列後，再用快速鍵切換回來</title>
        <description>&lt;h2&gt;啥？&lt;/h2&gt;

&lt;p&gt;習慣於鍵盤操作 Chrome，比如 &lt;a href=&quot;https://github.com/philc/vimium/&quot;&gt;Vimium&lt;/a&gt; 或是 &lt;a href=&quot;https://github.com/1995eaton/chromium-vim&quot;&gt;cvim&lt;/a&gt; 等擴充套件，在需要跳轉網址列進行搜尋時，都會很自然的使用 Chrome 的內建快速鍵：&lt;code&gt;CMD + L&lt;/code&gt;（在 Windows 是 F6）來操作。&lt;/p&gt;

&lt;p&gt;那回來呢？我想要在切回網頁本身，再次用熟悉的 VIM key binding 來衝浪。&lt;/p&gt;

&lt;p&gt;很遺憾的，Chrome 本身並沒有提供此功能，而擴充套件的作用域也不包含網址列，在經過 Google 之後終於找到一個 Hacky 的解法。&lt;/p&gt;

&lt;h2&gt;建立自訂搜尋引擎&lt;/h2&gt;

&lt;p&gt;在設定找「搜尋引擎」：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/qmkSYvX.png&quot; alt=&quot;search-engine&quot;&gt;&lt;/p&gt;

&lt;p&gt;在最底下新增一個搜尋引擎，三個欄位分別填入&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Refocus &lt;span class=&quot;c&quot;&gt;# 自訂搜尋引擎名稱&lt;/span&gt;
i &lt;span class=&quot;c&quot;&gt;# 要綁定的關鍵字，越短越好&lt;/span&gt;
javascript:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如下圖：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/J5d9Kec.png&quot; alt=&quot;add-search-engine&quot;&gt;&lt;/p&gt;

&lt;p&gt;接下來在切換到網址列之後，主要輸入綁定的關鍵字，再按下 enter，就能切換回網頁囉：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/tgxysRe.png&quot; alt=&quot;address-bar&quot;&gt;&lt;/p&gt;

&lt;p&gt;via &lt;a href=&quot;http://superuser.com/questions/324266/google-chrome-mac-set-keyboard-focus-from-address-bar-back-to-page/324267#324267&quot;&gt;Google Chrome (Mac) set keyboard focus from address bar back to page - Super User&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 12 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://yukaii.tw/blog/2016/08/12/refocus-from-chrome-address-bar/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2016/08/12/refocus-from-chrome-address-bar/</guid>
        
        
      </item>
    
      <item>
        <title>rbenv、fish 與 VSCode 設置之路</title>
        <description>&lt;p&gt;在最新的 VSCode 1.3.1 版裡，Integrated Terminal 變得更加好用，但由於上游套件 &lt;code&gt;xterm.js&lt;/code&gt; 的緣故，&lt;code&gt;zsh&lt;/code&gt; 還是有無法捲動的問題。不過作為一個 Rails 開發者，VSCode 已經是個足夠好用的、足矣媲美 Sublime Text 的編輯器了。為了能夠在 VSCode 開發 Rails，特別對目前的開發環境做出調整。&lt;/p&gt;

&lt;h2&gt;由 RVM 轉換至 rbenv&lt;/h2&gt;

&lt;p&gt;聽聞 &lt;a href=&quot;https://github.com/rbenv/rbenv&quot;&gt;rbenv&lt;/a&gt; 相較 rvm 來說，是對系統較為乾淨的 ruby 版本管理工具。就趁這次更新開發環境一起重置吧！&lt;/p&gt;

&lt;h3&gt;移除 rvm&lt;/h3&gt;

&lt;p&gt;套件也內建了一鍵移除的方式：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rvm implode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;做完之後也可以將 rvm 剩餘的檔案移掉：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rm -rf ~/.rvm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;安裝 rbenv&lt;/h3&gt;

&lt;p&gt;參照了&lt;a href=&quot;https://github.com/rbenv/rbenv&quot;&gt;專案官網&lt;/a&gt;的說明，只要把該 repo clone 下來，設置好 &lt;code&gt;PATH&lt;/code&gt; 變數，在為 shell 加上一些設定便可以開始安裝 ruby 了。在 OS X 環境又更容易，只要用 Homebrew 一鍵安裝便成。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;brew install rbenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;裝完之後就可以發現 rbenv 已經被裝到 Homebrew 的可執行位置了，可以跑 &lt;code&gt;which&lt;/code&gt; 指令檢驗&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;which rbenv
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; /usr/local/bin/rbenv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 Homebrew 安裝跑完之後，安裝腳本會提示已在 shell profile(.zshrc/.profile/.bash_profile) 加上 rbenv 初始化腳本，預設內容如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.rbenv/bin:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;rbenv init -&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第二行的 &lt;code&gt;rbenv init -&lt;/code&gt; 指令輸出，在你一般開啟的 Terminal 會跑出：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/Users/USERNAME/.rbenv/shims:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RBENV_SHELL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;zsh
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/usr/local/Cellar/rbenv/1.0.0/libexec/../completions/rbenv.zsh'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ... 下面一串&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不過在 VSCode 內建終端機卻會跑出：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/usr/local/opt/rbenv/shims:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 就這行不同&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RBENV_SHELL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;zsh

&lt;span class=&quot;c&quot;&gt;# ... 下面一樣&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;大概是執行權限不同的關係吧，rbenv 執行的位置不同也會讓 &lt;code&gt;gem&lt;/code&gt;/&lt;code&gt;bundler&lt;/code&gt; 裝到不同的位置，為了方便起見，一律設成一般終端機跑出來的那串。把下面這串貼到 &lt;code&gt;~/.zshrc&lt;/code&gt; 最下面就是。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/Users/USERNAME/.rbenv/shims:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RBENV_SHELL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;zsh
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/usr/local/Cellar/rbenv/1.0.0/libexec/../completions/rbenv.zsh'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;rbenv rehash 2&amp;gt;/dev/null
rbenv&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;local command
  command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$#&quot;&lt;/span&gt; -gt 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;shift
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi

  case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$command&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
  &lt;/span&gt;rehash|shell&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;rbenv &lt;span class=&quot;s2&quot;&gt;&quot;sh-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$command&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;rbenv &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$command&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;若是 fish 就貼下面這個：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;setenv PATH '/Users/USERNAME/.rbenv/shims' $PATH
setenv RBENV_SHELL fish
. '/usr/local/Cellar/rbenv/1.0.0/libexec/../completions/rbenv.fish'
command rbenv rehash 2&amp;gt;/dev/null
function rbenv
  set command $argv[1]
  set -e argv[1]

  switch &quot;$command&quot;
  case rehash shell
    . (rbenv &quot;sh-$command&quot; $argv|psub)
  case '*'
    command rbenv &quot;$command&quot; $argv
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;裝 ruby&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rbenv install 2.3.1
rbenv global 2.3.1
gem install bundler

bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;搞定！&lt;/p&gt;

&lt;h3&gt;Pow 的額外設定&lt;/h3&gt;

&lt;p&gt;其實在 Pow 的 &lt;a href=&quot;https://github.com/basecamp/pow/wiki/Troubleshooting&quot;&gt;wiki&lt;/a&gt; 就有解答，不過因為我又對 rbenv 做了 PATH 的改動，所以設定也不太一樣。&lt;/p&gt;

&lt;p&gt;打開 ~/.powconfig 並貼入&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/Users/USERNAME/.rbenv/shims:/Users/USERNAME/.rbenv/shims/bin:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後重啟 pow service&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;touch ~/.pow/restart.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;將主要 shell 由 zsh 換成 fish&lt;/h2&gt;

&lt;p&gt;zsh 有著非常有名的 &lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;oh-my-zsh&lt;/a&gt; 設定檔管理框架，fish 底下也有個好用的叫 &lt;a href=&quot;https://github.com/fisherman/fisherman&quot;&gt;fisherman&lt;/a&gt;。不過我終究是沒有把系統預設的 shell 換掉(&lt;code&gt;chsh&lt;/code&gt; 指令)，因為挺多工具與 fish 不相容。&lt;/p&gt;

&lt;p&gt;fish 啟動速度飛快，帶我重回還沒有裝一堆 zsh 套件的美好往日時光。&lt;/p&gt;

&lt;h3&gt;VSCode&lt;/h3&gt;

&lt;p&gt;講來講去這篇好像跟 VSCode 沒啥關係耶？那就附張截圖好了，VSCode 也是十分優秀的 Markdown 編輯器，內建了快速的 Preview，碼 code、寫文件、Terminal、Task Runner 全都內建了，還夠輕量快速，Extension 也陸續多了起來，還真不好挑剔啊 XD。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-o17HvZ1w7k6NzK0kw84uJNdhTmnWCH1hGyHduSokRnhgdeoaIh8reqDVrlAc43uGIN9K5KZYpujZuuSdqrV5BiuBhYNsQlubHEfAPut1pGvbkYzw3zKLfuEpphlj7JpBKj9x3m-Zk-rA4s-xFXnagC3vO8otXWOAH7qXYg47kx8D1qHVDpwHjD4WW8yd1jV_CYZlL5VWfrbbiVAdlwBDalB_UexT8emkhqTMjNwQMhIwMyqEXk8LcsfuI5IqgpdR488KovW9Z3ckMJjMbMWSpYOUfMuJ4_pRgYPMla9cm-h6QcP5PXIyhfTERUTRUyUAawcJAWC74R519UVe_gLizh0RqvKazWU0ISCjXVOmbH_bljBAwRIBZobMme9W3deBztAMd0asjKFJnjsviDKDgb1n5y8wS6z5nfNGWijNJbl2JwpVv9EVStbGM4OoqM-9st2MO5oVZJEK8PgtNp1LvuBr3Qkch_k2RXnSZJTfxs4aYZroTJTplZI2XEZS8bkK6Xlczod9rFAvsBdSK2G1A3rixmyBrTOkb7YE7Z8E5NRGWXx3mJns607eu00e69bzGlSe7kc_IpwN1wiYUtqWuRjABPqIhsV=w1046-h781-no&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 22 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://yukaii.tw/blog/2016/07/22/rbenv-fish-and-vscode/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2016/07/22/rbenv-fish-and-vscode/</guid>
        
        
      </item>
    
      <item>
        <title>2016 年中、編輯器三雄大對決！</title>
        <description>&lt;h2&gt;前言&lt;/h2&gt;

&lt;p&gt;這題目一直以來都非常想戰啊，身為一個超級設定狂，什麼編輯器都要玩玩，惡搞到每個編輯器 startup time 都超久的...orz&lt;/p&gt;

&lt;p&gt;這次就選了三個主流的編輯器，Sublime Text、Atom、以及 Visual Studio Code，以下稍微簡介一下各編輯器的特性、好用插件，以及文本最主要的目的：秀截圖。畢竟功能那些，各家網站都講到爛了沒啥好說的。&lt;/p&gt;

&lt;h2&gt;Sublime Text&lt;/h2&gt;

&lt;p&gt;最近作者重啟開發，有著原生的順暢，&lt;del&gt;目前仍舊是我的主要編輯器&lt;/del&gt; &lt;sup id=&quot;fnref1&quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/SublimeLinter/SublimeLinter3&quot;&gt;SublimeLinter&lt;/a&gt; 配上 &lt;code&gt;eslint&lt;/code&gt; 還有 &lt;code&gt;rubocup&lt;/code&gt;，&lt;code&gt;JavaScript&lt;/code&gt; 及 &lt;code&gt;Ruby&lt;/code&gt; 這兩種我平常主要使用的語言，在靜態語言檢查就不成問題了&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/divmain/GitSavvy&quot;&gt;GitSavvy&lt;/a&gt; ，一個新興的 git 輔助套件，讓平時的 commit、diff、merge 輕鬆寫意，當然有時還是得用 SourceTree 或是 command 輔助一下啦&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tednaleid/sublime-EasyMotion&quot;&gt;EasyMotion&lt;/a&gt; 還有內建的 &lt;code&gt;Vintage Mode&lt;/code&gt;，讓我幾乎不動滑鼠就能輕鬆控制編輯器&lt;/li&gt;
&lt;li&gt;最近出現的 &lt;a href=&quot;https://github.com/oivva/boxy/&quot;&gt;Boxy Theme&lt;/a&gt; ，以簡便的介面自訂主題，設定各元件的字體、配色、大小。讓我換掉了之前寫自己幹出來、沒啥時間更新的主題：&lt;a href=&quot;https://github.com/Yukaii/Oceanic-Seti-ST3&quot;&gt;Oceanic Seti&lt;/a&gt;，還有最近被推薦的 &lt;a href=&quot;https://github.com/karelvuong/st-primer/&quot;&gt;primer theme&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/1TzDNfasHb9xTGxOQikoklQf3QfROd1VxPgOXvdo1EOuaUiJViBLjIIP9-LXKAEEM34Az8th0As8wMny0EcaD8p4qqGdEK98CcAogGGhl9XF7H8fHQBx8c8oVJoL7YOgiWJLSLs-7CdaaFtJ5RFkY05wjpnD-k-9zu4HoOLQwSgYxmy2oW_DdocLB03-LOjr6pNb39_1eoNtM4DoXrsx-7C_jE3HBrD-lykeyXXr1PPUuSzPB5WtBapeFpgXUfeRuQOtoR83czm0p97qm6xdedotPhRYvj_CwkzFiFjGmjBUQTWmAFFsY_PRf5hve-kDSFfnXBQB5TPu3DqVluwAXNTpr5xYxRO94t6oIm1MUXhyj007ZG5YCHBSvc-Veoio0DYO16GHmCo45Z0Mxr2c0_WIKGXeQV1IDsra_kIIaIF5RyMh00Wev2TySo5qGWa-rbsy1WodZ4sXEGxprIjFqdsoY20P0OubaPtpv6c4JuN7NQZuPqkz-E-3m7nFoTvxJUcbg8M9rIGGP0qxHvYiwCfgD1vg281IhduUcvyFAJqS4S2qh5_X_YmoIfBzMohlcwuCmY_2egbIoltd0zFb_CGDg9RfIi4a=s800&quot; alt=&quot;Sublime Text&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Atom Text Editor&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;套件裝不完編輯器系列。有著更佳好用的套件系統，不過開啟大量檔案編輯、或開啟稍大的檔案時（數 MB 吧），容易出現程式碼高亮緩慢，捲動頓挫明顯。&lt;/li&gt;
&lt;li&gt;介面單靠 css 就可以自訂，有著比起 Sublime 更精緻的 Autocomplete 及 Error Hint 介面。&lt;/li&gt;
&lt;li&gt;有內嵌的第三方 terminal 插件（&lt;code&gt;platformio-ide-terminal&lt;/code&gt;），不過多開仍舊頓挫&lt;/li&gt;
&lt;li&gt;資料夾內搜尋預設排除 &lt;code&gt;.gitignore&lt;/code&gt; 列表。就不會像 Sublime &lt;strong&gt;預設&lt;/strong&gt; 一樣搜出一堆 &lt;code&gt;node_modules&lt;/code&gt; 的套件&lt;/li&gt;
&lt;li&gt;內建 &lt;code&gt;timecop&lt;/code&gt; 插件，可以監看每次啟動時，各個插件所消耗的時間。真是走到另一個奇妙境界了，是有多需要調教啊（很需要 www）&lt;/li&gt;
&lt;li&gt;社群力驚人（看那精美的 stars 數量），或許過不了多久效能又能一大躍進...吧。&lt;a href=&quot;https://github.com/atom/atom/issues/10188&quot;&gt;會有軟黑出沒&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/K_Frf6tKJ4YwwG8LtG6YfqXpzC21AYbcb7vv7sbK0bnp9gYtoy3Wd2zJ3ncA3Nc5OYegV0ii3uLtfy5Z3MzZu5916zQ5AajJsa3kjvp5GEQr5BjVwEyFZE1QKNA3I2EzkovbdR4ZF-nGGssgwKrwzw6NBeQ8JnmClpXGKUJfiAsAPFNa8aOqakICu2SLbG0gfABtx86NPiRjgAD2h1hXZnj3S9ztdOO5F2-0-Fs-PVIhMGpy5yrj4SidVUn0OmjFmyaBGPANY_Xfkl5ulZF0WEl-ffPqu55G3SimXWnP6KEqCXj2ChuuO_HX3qiycazP0j3GMSxJY2MVLptzZXcACkowLs4gWMow09ZdH9oe1MSMxclNneoccvNSAZ9DyGsxTdZejgmcNT4harDopf9RteXI1CH6bwojar72Q4bQAXu00BwtBYQGWPFNknfvjG4HBoMf_8FQKruyTZqJVJx9R_JCsM8Lnr-7dnMLT1AEENRWt7zyxqFIg4t1dMCstbMECcjJueqANMCI--Hh4CxrCuKcNHAUmkOJh8_dBxTHZ9pxEuyrXoeyz5OxR2zxXIBiKtwBdX1RCxZU2Fp4dGSRbgAPYvpZfwd0=s800&quot; alt=&quot;Atom&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Visual Studio Code&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;後起之秀，快讚歎我軟技術力威能。&lt;/li&gt;
&lt;li&gt;同源自 Atom 的 Electron Framework，不過卻被我軟寫的更佳滑嫩順暢，順暢程度宛若 Native，&lt;del&gt;早就叫你不要用 CoffeScript 要用 TypeScript 了吼&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;在即將推出的六月份更新，加入了 Tab 實作、多開 Terminal 支援（對你沒看錯，官方支援 Terminal），以及新的插件安裝介面。&lt;/li&gt;
&lt;li&gt;我軟不斷採納 &lt;a href=&quot;https://visualstudio.uservoice.com/forums/293070-visual-studio-code/&quot;&gt;UserVoice&lt;/a&gt; 上的使用者反饋，GitHub 上詳細的列出開發 VSCode 的&lt;a href=&quot;https://github.com/Microsoft/vscode/wiki/Roadmap&quot;&gt;產品規劃 (Product Roadmap)&lt;/a&gt;、&lt;a href=&quot;https://github.com/Microsoft/vscode/wiki/Iteration-Plans&quot;&gt;迭代計劃 (Iteration Plan)&lt;/a&gt;、&lt;a href=&quot;https://github.com/Microsoft/vscode/wiki/Development-Process&quot;&gt;開發程序 (Development Process)&lt;/a&gt; 等等，十分公開透明，每個月的 &lt;a href=&quot;https://github.com/Microsoft/vscode/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue%20label%3Aiteration-plan%20&quot;&gt;Iteration Plan&lt;/a&gt; 更是讓人有如等待漫畫月更一般期待 😍&lt;/li&gt;
&lt;li&gt;推出時最大賣點為內建 intellisense 的 code complete，官方支援的 debugger 還有 git tools，最近還出現了官方支援的 &lt;a href=&quot;https://github.com/Microsoft/vscode-react-native&quot;&gt;react-native 插件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com&quot;&gt;套件商店&lt;/a&gt;也是蓬勃發展中。你怎麽能不愛他呢？XD&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;看看下圖，連 syntax highlight 都完勝……真是花俏啊，驕傲的兔子。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/qrZaLIwG3cYV_uKDbAxb-nh_OHt55TeUjg3krrNLgPsRI1X1_yc6vv6vLYDaCStUHoCWulFTx-AbayRUoGlh44tRnE84POO7WicMuFyWfIqmvfhUbAbGvOkggXT3Ekbr2eAlEKEP2kjfKTFTz3WrWwObX-W2Fti52m0QGdjLCGcjPt6qjPnLPhtdxCOLj_ZCpl_sxiYCHwd9DDrfL_FetwtPWQsWVze4BF7UY7Kz9y2RDL3G8k9b3bCtqAjiv7dIL03WP-WYWl3MDppt0imrxpZhOe_SD7g3csbJss_O2SOO20Og8Tcki4Q2rrQx8C4GkBI-SCwa_4Wi1cuNZX7zQ2_xxpSz0w4b4kEn72OxhK7rRKO7q9C1S9Sm9ULEYvMq2dZd4skEjKmS2xNkETEYgPDtyU_hutgyY5LcrfApAW6akLIY3sHNPK0SjdtmSuU_L_Z2A1bbRFeY548lyt9NizQn9ddUqn2WYBbw45UWBDiW-cCTLpiNCWjj7yED-04h6Tgw2yjEB_g-HAHujS6IGtQtgmHa56Tc_WqjzESOxIaCfCxYWMetCzMD-DDNi8c9wIGDXj-jDifMc3bGOVXQWf-9Jd6PKvDp=w1053-h735-no&quot; alt=&quot;VSCode&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;現在最阻擋我使用 VSCode 的功能只剩 minimap&lt;/del&gt; &lt;sup id=&quot;fnref2&quot;&gt;&lt;a href=&quot;#fn2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; ，以及&lt;del&gt;有時 cpu 資源消耗過高的情況&lt;/del&gt; &lt;sup id=&quot;fnref3&quot;&gt;&lt;a href=&quot;#fn3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;。畢竟不是 Native 嘛，但我想再這樣發展下去，&lt;del&gt;追上 Atom 也不是不可能啊&lt;/del&gt; &lt;sup id=&quot;fnref4&quot;&gt;&lt;a href=&quot;#fn4&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;值得一提的是，雖然 VSCode 的設定不像 Atom 有 GUI 可以勾選，也是和 Sublime 一樣需要編寫設定檔，但是只要一開啟設定介面，就會自動跳出 split view 對照設定檔預設值供對照修改，每個插件的預設設定除了擁有自己的 namespace 外，所有的設定值都會有 autocomplete，可比 Sublime 好用太多了。&lt;/p&gt;

&lt;p&gt;在自訂介面上，雖然不如 Atom 完全 Hackable，不過也有第三方推出的 &lt;a href=&quot;https://github.com/be5invis/vscode-custom-css&quot;&gt;vscode-custom-css&lt;/a&gt; 插件可供修改，在最新的 &lt;a href=&quot;https://github.com/Microsoft/vscode/issues/10145&quot;&gt;August Iteration Plan&lt;/a&gt; 裡面，介面自訂 API 的暴露也在計劃當中。&lt;/p&gt;

&lt;h2&gt;結論&lt;/h2&gt;

&lt;p&gt;&lt;del&gt;我說那個 vim 呢？其實我都用 &lt;a href=&quot;http://vim-bootstrap.com/&quot;&gt;Vim Bootstrap&lt;/a&gt;無腦一鍵上手&lt;/del&gt;。總之，&lt;del&gt;雖然平時我還是以 Sublime 作為主要工具，但也對 VSCode 的發展十分看好&lt;/del&gt; &lt;sup id=&quot;fnref1&quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。那麼 Atom 呢？毫無反應，就是個 Hackable 的 Editor，十分適合拿來惡搞，只要你想，回到 90 年代也未嘗不可：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/79NInG4caoVFAZlGOUKajtxlw5692Y3dnQDHwDomsBGKoT3q4hOaYGnSUUQCTyvSJO7ikL1DvsAH6n81kDWsx-36QtQM8VnfK5R-aJiFqP2W5vdQpzfwKjw7iw771dzP_eWf9eMU2DYDVX-WAg_Q_V_LmmQDqJMyx9Jx_Rx05Td15P6hzAmnJhSXuHlKUtVg2dChf22kOwZU2AvtHEOa5qhbTBI2pu6nbUwEODaEKpX5MIG5D0r-fobk9NrgkdGrGr6ZdaLy0iFJtqVNdRB3JolAU3yttOgWG_Nfp3Rihn9YZ-WDexU_d4A9D-Vu241WKnl9B0Y9oZ9gVjC7vbfhkbliGI9hfLWuusUVCAMjdBfRcH1lohoLifYeEnDJz2m7Qa88wbJxmCdoK8pNy50fAks8KehaQYI4FcKHg6GvyBbCoxOqTbX37VcEj8KA7owoF9OaFjWnbM0ngWOrqvjz7xwjMsSQS0l_zZzmQZAmIT7Dw8IPZQ4yb_W-16-Qu3fdw3kjsGfPWpAnb1l2kPMpX-BPwjk8GCX7ao2cHdsJz1R_MDmnu-XtBPiNV05kXlfoTucjmCBnSWK4Agd5TE05YQRFtqWq-iJs=s800&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;完。&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;作者已經變成微軟 VSCode 的形狀惹&amp;nbsp;&lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn2&quot;&gt;
&lt;p&gt;發現 VSCode 的 Enhanced Scrollbar 比 Minimap 更佳實用，已經完全不需要啦 XDDD&amp;nbsp;&lt;a href=&quot;#fnref2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn3&quot;&gt;
&lt;p&gt;後來發現是第三方插件 Todo Parser 的問題，移除就沒事啦&amp;nbsp;&lt;a href=&quot;#fnref3&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn4&quot;&gt;
&lt;p&gt;在我心目中已經遠超十條街了&amp;nbsp;&lt;a href=&quot;#fnref4&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 22 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://yukaii.tw/blog/2016/06/22/sublime-atom-vscode-comparison-mid-2016/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2016/06/22/sublime-atom-vscode-comparison-mid-2016/</guid>
        
        
      </item>
    
      <item>
        <title>在 GitHub 上設定 Jekyll 和自訂網域</title>
        <description>&lt;p&gt;花了時間把 Jekyll 建起來。Ghost 是很棒沒錯，不過想要完全掌控還要多花許多時間，純粹靜態網頁更為靈活，再配上 &lt;code&gt;jekyll-assets&lt;/code&gt;，如果真的需要點 ES6 還是可以硬上的。&lt;/p&gt;

&lt;h2&gt;Git Subtree&lt;/h2&gt;

&lt;p&gt;我把原始的 branch 命名為 &lt;code&gt;jekyll&lt;/code&gt;，用 subtree 把 Jekyll 產生的 &lt;code&gt;_site&lt;/code&gt; 資料夾切開：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;git checkout -b jekyll &lt;span class=&quot;c&quot;&gt;# 原本在 master&lt;/span&gt;
git branch -D master &lt;span class=&quot;c&quot;&gt;# 把原本 master branch 刪掉&lt;/span&gt;
git subtree split --prefix&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;_site -b master &lt;span class=&quot;c&quot;&gt;# subtree 切割&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到這算切割完畢，接下來每次更新時，都從原本 &lt;code&gt;jekyll&lt;/code&gt; branch commit，然後 push subtree 的 branch：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;git commit -m &lt;span class=&quot;s2&quot;&gt;&quot;commit on jekyll branch&quot;&lt;/span&gt;
git subtree push --prefix _site origin master &lt;span class=&quot;c&quot;&gt;# 將 _site 的 subtree 推到 origin 的 master branch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;GitHub user page custom domain&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;二圖流&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/cloudflare1.png&quot; width=&quot;967&quot; height=&quot;117&quot; alt=&quot;blog/cloudflare1.png&quot;&gt;
&lt;img src=&quot;/assets/blog/cloudflare2.png&quot; width=&quot;959&quot; height=&quot;59&quot; alt=&quot;blog/cloudflare2.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;CNAME&lt;/code&gt; 檔：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;www.yukaii.tw
yukaii.tw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;其它自訂&lt;/h2&gt;

&lt;p&gt;Jekyll 也有 partial 挺方便的，我用來做 image caption，比如以下這段：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;
{% include image.html url=&quot;http://i.imgur.com/gqOPCwP.jpg&quot; description=&quot;六月不要啊啊啊，應該沒有第二行啦&quot; %}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就會產生：&lt;/p&gt;

&lt;table class=&quot;image&quot; style=&quot;margin-bottom: 15px&quot;&gt;
&lt;caption align=&quot;bottom&quot;&gt;六月不要啊啊啊，應該沒有第二行啦&lt;/caption&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://i.imgur.com/gqOPCwP.jpg&quot; alt=&quot;六月不要啊啊啊，應該沒有第二行啦&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;需要在 &lt;code&gt;_includes&lt;/code&gt; 資料夾新增 &lt;code&gt;image.html&lt;/code&gt;，詳情可&lt;a href=&quot;http://stackoverflow.com/questions/19331362/using-an-image-caption-in-markdown-jekyll&quot;&gt;參考這裡&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Jun 2016 00:30:54 +0800</pubDate>
        <link>http://yukaii.tw/blog/2016/06/09/setup-jekyll-on-github-page/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2016/06/09/setup-jekyll-on-github-page/</guid>
        
        
        <category>jekyll</category>
        
        <category>setup</category>
        
        <category>github</category>
        
        <category>git</category>
        
        <category>subtree</category>
        
      </item>
    
      <item>
        <title>第十六篇 - ELK 安裝筆記</title>
        <description>&lt;p&gt;雖然說是筆記啦，實際上就是把&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-elasticsearch-logstash-and-kibana-elk-stack-on-ubuntu-14-04&quot;&gt;數位海的文章&lt;/a&gt;照著打一打就做完了（暈）這其實是一門課的作業，附上 &lt;a href=&quot;https://github.com/Yukaii/CS5124701&quot;&gt;Github&lt;/a&gt; 上的簡單說明：&lt;/p&gt;

&lt;blockquote&gt;
此份 Repo 是 118 104 第二學年度，CS5124701 巨量資料與分析的課堂作業一。作業一的要求就是寫一隻應用到 Twitter 或是 Github 的爬蟲，並把爬下的資料格式化成 json。在 3/29 的這週，教了 ELK Stack 設定方法，所以 Crawler 程式並沒有多做特別設定，直接套用課堂簡報上的 Logstash Twitter 樣板。

&lt;br/&gt;&lt;br/&gt;

以下記錄一下 ELK 安裝筆記，與課堂上略有不同的部分。說明一下，因為主力機 MBA 的儲存空間快炸了，所以我在 AWS 上開了一台 t2.medium 的機器當做跑 Spark 以及 ELK Stack 的平臺。在上週的課程簡報中 ELK 幾乎都是以下載 binary zip 包的方式設定，因為習慣用 apt 之流等套件管理程式，裝 ELK 相關設定檔也跟 binary zip 不太一樣。
&lt;/blockquote&gt;

&lt;p&gt;就是我龜毛所以要特別租一台機器操作。說到這，最近 Google Cloud Platform(GCP) 一註冊就送三百鎂的額度可以用，很讚，早知道就直接裝在上面了，幹嘛買啥 EC2 XDDD。詳情就請移駕到小弟 &lt;a href=&quot;https://github.com/Yukaii/CS5124701&quot;&gt;Github&lt;/a&gt;。&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Apr 2016 13:43:00 +0800</pubDate>
        <link>http://yukaii.tw/blog/2016/04/07/16th-elk-installation-notes/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2016/04/07/16th-elk-installation-notes/</guid>
        
        
        <category>Elasticsearch</category>
        
        <category>Logstash</category>
        
        <category>Kibana</category>
        
        <category>安裝魂</category>
        
        <category>就只是篇筆記</category>
        
      </item>
    
      <item>
        <title>第十五篇 - 使用 AWS CodeDeploy 跑起你的 WordPress - 官方教學筆記</title>
        <description>&lt;p&gt;為何要部屬 WordPress？就因為他是 &lt;a href=&quot;http://docs.aws.amazon.com/codedeploy/latest/userguide/welcome.html&quot;&gt;CodeDeploy&lt;/a&gt; Tutorial 的第一個範例。AWS Documention 有個特點，就是到處 Reference 來 Reference 去，你很難在單一流程完整跑完所有的任務，非得要搭著其它份文件一起對照。筆者英文也沒那麼好，看著看著就會漏東漏西，文件又滿滿的都是字，沒有圖片可以參考，真令人崩潰。&lt;/p&gt;

&lt;p&gt;CodeDeploy 是 AWS 眾多部屬方案中，看起來比較單純的一種。寫好 Setup 程式的 Shell Script，再聲明好 &lt;code&gt;appspec.yml&lt;/code&gt;，定義每個 deploy life cycle 不同的階段要跑的動作，用 AWS CLI Tool 把 repo 打包上傳到 S3，再到 CodeDeploy console 定義應用程式部屬規則、後臺發起一個 deployment（一個部屬行動），CodeDeploy Service 便會把你的 code 部屬到你設定的 Deployment Group，依照 Group 設定的機器不同，你可以在同一個機器部屬很多個 Application，或是同一個 Application 部屬到很多台機器，端看設定，啦。&lt;/p&gt;

&lt;p&gt;當然，AWS 系列就是啥都可以用 CLI 跑，只要開好對應權限的 role 並拿到 Access ID 和 Secret Key，我們也可以交由第三方 CI 服務，比如說 CodeShip，來幫我們完成「打包程式碼並上傳 S3」、「發起部屬行動」這種的工作。&lt;/p&gt;

&lt;p&gt;以下便大致記錄一下本日折騰的感想與流程。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;概念&lt;/h2&gt;

&lt;p&gt;CodeDeploy 約略是 14 年 11 月推出的服務，在此幹一張官圖，看圖說故事。
&lt;img src=&quot;http://docs.aws.amazon.com/codedeploy/latest/userguide/images/sds_architecture.png&quot; alt=&quot;CD&quot;&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在你的開發機器上寫好 code 、設定好 appspec.yml，上傳到 github 或是打包傳到 s3&lt;/li&gt;
&lt;li&gt;在 CodeDeploy 設定好部屬邏輯&lt;/li&gt;
&lt;li&gt;每一台 instance 的 agent 把 codebase 從 s3 或 github 拉下來&lt;/li&gt;
&lt;li&gt;跑部屬 script！裝裝裝&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;大概醬，英文版可以看&lt;a href=&quot;http://docs.aws.amazon.com/codedeploy/latest/userguide/welcome.html&quot;&gt;這&lt;/a&gt;，另外強烈建議 aws 系列最好都先從 &lt;a href=&quot;http://docs.aws.amazon.com/codedeploy/latest/userguide/concepts.html&quot;&gt;Concept&lt;/a&gt; 開始看，要不然鐵定被無限連結地獄搞死，崩潰。&lt;/p&gt;

&lt;h2&gt;名詞解說&lt;/h2&gt;

&lt;p&gt;可以開好&lt;a href=&quot;http://docs.aws.amazon.com/codedeploy/latest/userguide/getting-started-set-up-instance.html&quot;&gt;官方教學&lt;/a&gt;的分頁，淨身準備一下，接下來講解教學中會出現的名詞。其實名詞解釋放在教學開頭實在是挺不好的，我自己跑教學也是跟著實作之後才有點感覺，在還沒進行操作前做的說明都是廢話。話雖然是這樣說啦，可是這是筆記又不是演講，你翻到下面還是可以翻回來看啊，所以我還是寫在這了。呵呵。滿多中文名詞都我隨便翻的 XD，中文文件越少，我就掌握著更多的話語權（才怪），大家趕快來寫文件吧哈哈。&lt;/p&gt;

&lt;p&gt;AWS 在各種服務開 API 開很大開不用錢的狀況下，權限的管理便十分重要，阿罵爽雲端福利社使用 IAM 角色權限管理服務，來區分出不同服務或使用者，對於 AWS 服務使用的權限隔離。舉例來說，CodeDeploy 在 AWS 裡算是一個服務(Service)，雖然通通都是在 AWS 裡啦，但是你還是要給他一些對 AWS 資源的存取權限才可以，比如說當我們對好幾臺 EC2 Instances 設定了標籤（Tag），我們也要給 CodeDeploy 讀取 EC2 Intance 標籤的權限，CodeDeploy 才知道要部屬到哪幾台機器上啊，這就是權限管理的作用。&lt;/p&gt;

&lt;p&gt;不同的權限，在 IAM 裡就叫做 Policy（方針）。當人有了多項 Policy 之後，能力越大，責任越重，你所要承擔的就是職責了（屁話），在 IAM 裡我們把他稱作角色職責 (Role）。在 AWS 裡面有不同的服務，Role 的類型也都不同，比如 EC2 Instance 的 Role 就叫 Instance Profile，用來管理 EC2 能有那些權限，在 CodeDeploy 官方教學裡，EC2 的職責是把用 agent 把 codebase 從 s3 拉下來，所以在啟動 Instance 之前，我們必須先設定好能夠存取 S3 的 Instance Profile，並在啟動(Launch) Instance 把 Role 指派給他。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/0ulM7UH.png&quot; alt=&quot;&quot;&gt;
不同的 Role Type。CodeDeploy 教學中用到的分別是 CodeDeploy 和 EC2 的 Role Type。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/on614NX.png&quot; alt=&quot;&quot;&gt;
CodeDeploy 的 Service Role，直接掛上 AWS 建立好的 Policy，可以直接看出使用了那些權限。&lt;/p&gt;

&lt;h2&gt;跑教學...咦&lt;/h2&gt;

&lt;p&gt;我前面嫌的要死，就因為這次跑教學真的打死也找不到安裝 CodeDeploy agent 的步驟，反反覆覆翻了教學幾次，卻一直找不到哪裡出錯。以下來回顧一下。&lt;/p&gt;

&lt;p&gt;首先，&lt;a href=&quot;http://docs.aws.amazon.com/codedeploy/latest/userguide/getting-started-set-up-instance.html&quot;&gt;照著教學&lt;/a&gt;的說明先在 EC2 Launch 一個 Instance。他第一步教學的作用其實就是給你一個預先裝好 aws cli tools 的環境，好使用 cli 界面打包上傳 code 到 s3，用你自己的電腦其實就可以了。設定好 Keypair，透過 pem 檔 ssh 進機器後，先來&lt;a href=&quot;http://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-run-agent.html&quot;&gt;安裝 codedeploy agent 到機器上&lt;/a&gt;。裝到一半你會發現連 agent 的 aws s3 bucket 都抓不下來，原來是我們還沒設定 EC2 的 &lt;a href=&quot;http://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-configure-existing-instance.html&quot;&gt;Instance Profile&lt;/a&gt;，也就是 EC2 類型的 Role。請去 IAM 設定，並如同連結裡面加上 S3 的存取權限。這權限一定要開，即使現在用 wget 直接拉 bucket 的 agent install script 下來裝完，之後要從 s3 部屬時沒開也沒法抓啊。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3:Get*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3:List*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;範例 S3 的 widecard 權限，當然還是詳細指定比較好。先新增 Policy，在建立 EC2 Type 的 Role Attach 上去，或是建立 Role 時寫成 Inline Policy。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;是的。就是這兩點搞死我。&lt;strong&gt;第一，EC2 Role 要先設定 S3 存取權，並在 Instance 建立時掛載。第二，CodeDeploy Agent 要先裝上 Instance&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;教學是都搜尋的到啦，可是排成一個完整版不好嗎，都已經拆 Step by Step 了，還 Lost 一堆，崩潰啦，難怪各種 AWS 代管服務蓬勃發展啊無誤 XDDD&lt;/p&gt;

&lt;h2&gt;再跑一次&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先在 IAM 建立兩個 Role ，一個是給 EC2 的，一個是給 CodeDeploy 的。EC2 Role 直接用上面提到的 S3 Bucket 權限寫進去，EC2 的 Role 又稱 Instance Profile，呵。CodeDeploy 的 Role 直接掛上官方的 CodeDeployPolicy，如圖：
&lt;img src=&quot;http://i.imgur.com/F15UVaN.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;依照教學 Launch Amazon 的 Linux Instance，記得掛上剛剛建立的 EC2 Role。成功 ssh 連進去後安裝 &lt;a href=&quot;http://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-run-agent.html&quot;&gt;code deploy agent&lt;/a&gt;，ubuntu 就選 apt 的那個，Amazon 自家 Linux 就選 yum 的那個，把他裝起來。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;依照教學，把 WordPress 的 Repo 載下來，建立相應的 init script 還有 &lt;code&gt;appspec.yml&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;依照教學，利用 aws cli 建立 application，上傳 s3，這邊依照教學要開一份 IAM 的 User，掛上 s3 put 的權限，下載 User 的 credential (id &amp;amp; secret key)，跑 aws configure 填入設定，這樣才可以在這臺暫時的工作機上傳檔案到 s3。依照教學打包 WordPress 上傳 s3。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;到 CodeDeploy Console 建立 Deploy 設定。設定 DeployGroup，權限記得掛上之前建立的 CodeDeploy Service Role，其它照著跑。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;建立部屬行動(Deployment，the 名詞)，看有沒有部屬成功。假如連 Events 都沒顯示，大概是 IAM 權限設定有問題，看一下 EC2 Role 和 CodeDeploy Role 有沒有設定正確&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大概就這樣啦，這還只是 WordPress 而已，我要部屬的可是 Rails App 欸，之後想必有更細節的其它地方。這樣跑完了一次（還順便被雷了一下午），對 AWS 的理解就更深了，請期待之後的後續文章，哈哈哈（不要說一說就不寫了）&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Apr 2016 14:46:00 +0800</pubDate>
        <link>http://yukaii.tw/blog/2016/04/01/15th-use-aws-codedeploy-deploy-wordpress/</link>
        <guid isPermaLink="true">http://yukaii.tw/blog/2016/04/01/15th-use-aws-codedeploy-deploy-wordpress/</guid>
        
        
        <category>aws</category>
        
        <category>codedeploy</category>
        
        <category>wordpress</category>
        
        <category>official</category>
        
        <category>tutorial</category>
        
        <category>workthrough</category>
        
        <category>notes</category>
        
      </item>
    
  </channel>
</rss>
